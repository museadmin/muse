##############################################################
##
## Name         :   mu_test_files
## Author       :   Bradley Atkins
## Description  :   Assertions for file testing
## Date         :   05/08/2015
## Args         :   
## Status       :   Reviewed    [n]
##                  Tested      [n]
##                  Released    [n]
##                  Disabled    [n]
##############################################################
## File exists - Pass
def Test-FileExists-True
    assert_file_exists "/var/log/messages" "Test should have passed"
end
## File exists - Fail
def Test-FileExists-False
    assert_file_exists "/var/log/massages" "Fail with file not found"
end
## Regular File exists - Pass
def Test-RegularFileExists-True
    assert_regular_file_exists "/var/log/messages" "Test should have passed"
end
## Regular File exists - Fail
def Test-RegularFileExists-False
    assert_regular_file_exists "/var/log/massages" "Fail with file not found"
end
## File exists and is not zero size - Pass
def Test-RegularFileIsNotZeroSize-Pass
    echo "test string" > ${MU_TMP}/assert_file_not_zero.tmp
    assert_file_not_zero "${MU_TMP}/assert_file_not_zero.tmp" "Test should have passed"
    [[ -f "${MU_TMP}/assert_file_not_zero.tmp" ]] && rm -f "${MU_TMP}/assert_file_not_zero.tmp"
end
## File exists and is not zero size - Fail
def Test-RegularFileIsNotZeroSize-Fail
    :> ${MU_TMP}/assert_file_not_zero.tmp
    assert_file_not_zero "${MU_TMP}/assert_file_not_zero.tmp" "Fail with empty file found"
    [[ -f "${MU_TMP}/assert_file_not_zero.tmp" ]] && rm -f "${MU_TMP}/assert_file_not_zero.tmp"
end
## File exists and is a directory - Pass
def Test-FileIsDirectory-True
    assert_file_is_dir "${MU_TMP}" "Test should have passed"
end
## File exists and is a directory - Fail
def Test-FileIsDirectory-Fail
    assert_file_is_dir "/temple" "Fail with dir not found"
end
## File exists and is block device - Pass
def Test-IsBlockDevice-True
    BD="/dev/$(ls /sys/block | awk '{print $1;exit}')"
    assert_is_block_device "${BD}" "Test should have passed"
end
## File exists and is block device - Fail
def Test-IsBlockDevice-Fail
    BD="/var/log/messages"
    assert_is_block_device "${BD}" "Fail because not block device"
end
## File exists and is chacter device - Pass
def Test-IsCharacterDevice-True
    CD="/dev/$(ls -l /dev | awk '/^c/{print $NF;exit}')"
    assert_is_character_device "${CD}" "Test should have passed"
end
## File exists and is character device - Fail
def Test-IsCharacterDevice-Fail
    CD="/var/log/messages"
    assert_is_character_device "${CD}" "Fail because not character device"
end
## File exists and is named pipe - Pass
def Test-IsNamedPipe-True
    TP="${MU_TMP}/munit_pipe"
    mkfifo "${TP}" || raise_error "Failed to create named pipe for test"
    assert_is_named_pipe "${TP}" "Test should have passed"
    [[ -p "${TP}" ]] && rm -f "${TP}"
end
## File existts and is named pipe - Fail
def Test-IsNamedPipe-Fail
    assert_is_named_pipe "/var/log/messages" "Fail because file is not a named pipe"
end
## File descriptor is associated with a terminal
def Test-IsTerminal-True
    assert_is_a_terminal "0" "Test should have passed"
end
## File descriptor is not associated with a terminal
def Test-IsTerminal-False
    assert_is_a_terminal "/var/log/messages" "Fail because file is not a terminal"
end
## File is older than - Pass
def Test-FileIsOlder-True
    NEWF="${MU_TMP}/munit_newfile"
    date > "${NEWF}"
    assert_is_older_than "${NEWF}" "/var/log/messages" "Test should have passed"
    [[ -f "${NEWF}" ]] && rm -f "${NEWF}"
end
## File is older than - Fail
def Test-FileIsOlder-Fail
    NEWF="${MU_TMP}/munit_newfile"
    date > "${NEWF}"
    assert_is_older_than "/var/log/messages" "${NEWF}" "Fail because file newer"
    [[ -f "${NEWF}" ]] && rm -f "${NEWF}"
end
## File is newer than - Pass
def Test-FileIsNewer-True
    NEWF="${MU_TMP}/munit_newfile"
    date > "${NEWF}"
    assert_is_newer_than "/var/log/messages" "${NEWF}" "Test should have passed"
    [[ -f "${NEWF}" ]] && rm -f "${NEWF}"
end
## File is newer than - Fail
def Test-FileIsNewer-Fail
    NEWF="${MU_TMP}/munit_newfile"
    date > "${NEWF}"
    assert_is_newer_than "${NEWF}" "/var/log/messages" "Fail because file older"
    [[ -f "${NEWF}" ]] && rm -f "${NEWF}"
end
