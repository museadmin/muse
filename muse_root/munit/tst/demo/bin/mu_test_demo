##############################################################
##
## Name         :   mu_test_keywords
## Author       :   Bradley Atkins
## Description  :   Test the function m_get_file_data in file
##                  test.res
## Date         :   05/08/2015
## Args         :   
## Status       :   Reviewed    [n]
##                  Tested      [n]
##                  Released    [n]
##                  Disabled    [n]
##############################################################
def Test-UnitTestOfLibraryFunction
   
    #======================================
    # Require our Files under Test
    #======================================
    require_file test.res
    import test.res
    require_file funky_dirs.tar
    require_file UnitTestOfLibraryFunction-1.exp
    require_file UnitTestOfLibraryFunction-2.exp
    require_file UnitTestOfLibraryFunction-3.exp
    require_file UnitTestOfLibraryFunction-4.exp

    #======================================
    # All available so assign to VARS
    #======================================
    mu_get_exp_file UnitTestOfLibraryFunction-1 TMPEXP1
    mu_get_exp_file UnitTestOfLibraryFunction-2 TMPEXP2
    mu_get_exp_file UnitTestOfLibraryFunction-3 TMPEXP3
    mu_get_exp_file UnitTestOfLibraryFunction-4 TMPEXP4
    mu_find_file funky_dirs.tar TARFILE
    mu_find_file UnitTestOfLibraryFunction-1.exp EXP1
    mu_find_file UnitTestOfLibraryFunction-2.exp EXP2
    mu_find_file UnitTestOfLibraryFunction-3.exp EXP3
    mu_find_file UnitTestOfLibraryFunction-4.exp EXP4

    #======================================
    # Create the directory structure for 
    # the function to run against
    #======================================
    DIROOT="${MU_TMP}/UnitTestOfLibraryFunction"
    mkdir "${DIROOT}" || raise_error "mkdir (${DIROOT}) failed"
    cd "${DIROOT}" || raise_error "cd to (${DIROOT}) failed"
    cp "${TARFILE}" . || raise_error "File copy failed (${TARFILE})"
    tar xvf "${TARFILE}" >/dev/null || raise_error "Untar failed for (${TARFILE})"

    #======================================
    # First test - Call with defaults
    #======================================
    m_get_file_data "m_test1_dirs" > "${TMPEXP1}"
    assert_is_not_different "${TMPEXP1}" "${EXP1}" "Test 1 failed"

    #======================================
    # Second test - Call with sort option
    #======================================
    m_get_file_data -s "m_test1_dirs" > "${TMPEXP2}"
    assert_is_not_different "${TMPEXP2}" "${EXP2}" "Test 2 failed"

    #======================================
    # Third test - sorted directories
    #======================================
    m_get_file_data -s -d "m_test1_dirs" > "${TMPEXP3}"
    assert_is_not_different "${TMPEXP3}" "${EXP3}" "Test 3 failed"

    #======================================
    # Fourth test - sorted with depth
    #======================================
    m_get_file_data -s -min 1 -max 2 "m_test1_dirs" > "${TMPEXP4}"
    assert_is_not_different "${TMPEXP4}" "${EXP4}" "Test 4 failed"

    cd - >/dev/null 2>&1

end
