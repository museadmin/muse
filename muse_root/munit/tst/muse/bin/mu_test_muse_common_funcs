#! /bin/bash
##############################################################
##
## Name         :   mu_test_muse_common_funcs
## Author       :   Bradley Atkins
## Description  :   Test the functions in muse lib common.funcs
## Date         :   09/08/2015
## Args         :   
## Status       :   Reviewed    [n]
##                  Tested      [n]
##                  Released    [n]
##                  Disabled    [n]
##
## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, version 2 only.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program; if not, write to the Free Software
## Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  
## USA
##
##############################################################

#======================================
# Test of m_get_file_data 
#======================================
def Test-m_get_file_data
   
    #======================================
    # Require our Files under Test
    #======================================
    require_file m_fail_raise_error
    require_file common.funcs
    require_file funky_dirs.tar
    require_file m_get_file_data-1.exp
    require_file m_get_file_data-2.exp
    require_file m_get_file_data-3.exp
    require_file m_get_file_data-4.exp
    import m_fail_raise_error
    import common.funcs

    #======================================
    # All available so assign to VARS
    #======================================
    mu_get_exp_file m_get_file_data-1 TMPEXP1
    mu_get_exp_file m_get_file_data-2 TMPEXP2
    mu_get_exp_file m_get_file_data-3 TMPEXP3
    mu_get_exp_file m_get_file_data-4 TMPEXP4
    mu_find_file funky_dirs.tar TARFILE
    mu_find_file m_get_file_data-1.exp EXP1
    mu_find_file m_get_file_data-2.exp EXP2
    mu_find_file m_get_file_data-3.exp EXP3
    mu_find_file m_get_file_data-4.exp EXP4

    #======================================
    # Create the directory structure for 
    # the function to run against
    #======================================
    DIROOT="${MU_TMP}/m_get_file_data"
    mkdir "${DIROOT}" || raise_error "mkdir (${DIROOT}) failed"
    cd "${DIROOT}" || raise_error "cd to (${DIROOT}) failed"
    cp "${TARFILE}" . || raise_error "File copy failed (${TARFILE})"
    tar xvf "${TARFILE}" >/dev/null || raise_error "Untar failed for (${TARFILE})"

    #======================================
    # First test - Call with defaults
    #======================================
    m_get_file_data "m_test1_dirs" > "${TMPEXP1}"
    assert_is_not_different "${TMPEXP1}" "${EXP1}" "Test 1 failed"

    #======================================
    # Second test - Call with sort option
    #======================================
    m_get_file_data -s "m_test1_dirs" > "${TMPEXP2}"
    assert_is_not_different "${TMPEXP2}" "${EXP2}" "Test 2 failed"

    #======================================
    # Third test - sorted directories
    #======================================
    m_get_file_data -s -d "m_test1_dirs" > "${TMPEXP3}"
    assert_is_not_different "${TMPEXP3}" "${EXP3}" "Test 3 failed"

    #======================================
    # Fourth test - sorted with depth
    #======================================
    m_get_file_data -s -min 1 -max 2 "m_test1_dirs" > "${TMPEXP4}"
    assert_is_not_different "${TMPEXP4}" "${EXP4}" "Test 4 failed"

    cd - >/dev/null 2>&1

end
#======================================
# Test for m_get_md5sum
#======================================
def Test-m_get_md5sum
   
    #======================================
    # Require our Files under Test
    #======================================
    require_file m_fail_raise_error
    require_file common.funcs
    require_file muse_mapper.funcs
    require_file m_get_md5sum.txt
    require_file m_get_md5sum.exp
    import common.funcs
    import m_fail_raise_error
    import muse_mapper.funcs

    #======================================
    # Tweak the environment for MUSE find
    #======================================
    export M_ROOT="${MU_TST}"
    mu_find_file m_get_md5sum.exp EXP

    #======================================
    # Do the test
    #======================================
    m_get_md5sum m_get_md5sum.txt MD
    
    assert_equal_string "${MD}" $(cat "${EXP}")

end
#======================================
# Test for m_check_file
#======================================
def Test-m_check_file
    #======================================
    # Requires
    #======================================
    require_file m_fail_raise_error
    require_file m_fail_record_failure
    require_file m_get_usr_tag.exp
    require_file common.funcs

    import m_fail_raise_error
    import common.funcs

    #======================================
    # Run the test
    #======================================
    mu_find_file m_check_file.exe CF
    m_check_file -rwx "${CF}" || raise_failure "Non zero exit code from m_check_file"

    #======================================
    # Test error pathways
    #======================================
    ## Overwrite m_fail_raise_error
    #import m_fail_record_failure
    #mu_get_exp_file m_check_file FAIL
    #export M_FAIL="${FAIL}"
    
    #m_check_file "i"
    #m_check_file "-f" "" 
    #m_check_file "-q" "/var/log/messages" 

end
#======================================
# Test for m_get_usr_tag
#======================================
def Test-m_get_usr_tag
    #======================================
    # Requires
    #======================================
    require_file common.funcs
    require_file m_fail_record_failure
    require_file m_get_usr_tag.exp

    #======================================
    # Stub a tag file and rejig the env
    #======================================
    mu_get_tmp_file m_get_usr_tag TFILE
    mu_get_exp_file m_get_usr_tag FAIL
    mu_find_file m_get_usr_tag.exp EXP
    echo "m_get_usr_tag" > "${TFILE}"
    export M_USR_TAG_FILE="${TFILE}"
    export M_USER_TAG=""
    export M_FAIL="${FAIL}"

    #======================================
    # Import the test lib and rigged m_fail
    #======================================
    import common.funcs
    import m_fail_record_failure
    
    #======================================
    # Positive test to return tag in exported
    # M_USER_TAG var
    #======================================
    m_get_usr_tag 
    assert_equal_string "m_get_usr_tag" "${M_USR_TAG}"

    #======================================
    # Negative tests to for failure paths
    #======================================
    ## nkdir failures
    echo "blocking" > /tmp/m_get_usr_tag
    m_get_usr_tag
    ## Fail because multiline tag
    echo "secondline" >> "${TFILE}"
    m_get_usr_tag
    ## Empty tag file failure
    :>"${TFILE}"
    m_get_usr_tag && raise_failure "m_get_usr_tag failed to trap empty tag file"
    #======================================
    # All msgs from m_fail should be in FAIL
    #======================================
    assert_is_not_different "${EXP}" "${FAIL}"

end
