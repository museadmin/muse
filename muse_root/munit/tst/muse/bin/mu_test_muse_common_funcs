#! /bin/bash
##############################################################
##
## Name         :   mu_test_muse_common_funcs
## Author       :   Bradley Atkins
## Description  :   Test the functions in muse lib common.funcs
## Date         :   09/08/2015
## Args         :   
## Status       :   Reviewed    [n]
##                  Tested      [n]
##                  Released    [n]
##                  Disabled    [n]
##
## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, version 2 only.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program; if not, write to the Free Software
## Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  
## USA
##
##############################################################

#======================================
# Test of m_get_file_data 
#======================================
def Test-m_get_file_data
   
    #======================================
    # Require our Files under Test
    #======================================
    require_file m_fail_raise_error
    require_file common.funcs
    require_file funky_dirs.tar
    require_file m_get_file_data-1.exp
    require_file m_get_file_data-2.exp
    require_file m_get_file_data-3.exp
    require_file m_get_file_data-4.exp
    import m_fail_raise_error
    import common.funcs

    #======================================
    # All available so assign to VARS
    #======================================
    mu_get_exp_file m_get_file_data-1 TMPEXP1
    mu_get_exp_file m_get_file_data-2 TMPEXP2
    mu_get_exp_file m_get_file_data-3 TMPEXP3
    mu_get_exp_file m_get_file_data-4 TMPEXP4
    mu_find_file funky_dirs.tar TARFILE
    mu_find_file m_get_file_data-1.exp EXP1
    mu_find_file m_get_file_data-2.exp EXP2
    mu_find_file m_get_file_data-3.exp EXP3
    mu_find_file m_get_file_data-4.exp EXP4

    #======================================
    # Create the directory structure for 
    # the function to run against
    #======================================
    DIROOT="${MU_TMP}/m_get_file_data"
    mkdir "${DIROOT}" || raise_error "mkdir (${DIROOT}) failed"
    cd "${DIROOT}" || raise_error "cd to (${DIROOT}) failed"
    cp "${TARFILE}" . || raise_error "File copy failed (${TARFILE})"
    tar xvf "${TARFILE}" >/dev/null || raise_error "Untar failed for (${TARFILE})"

    #======================================
    # First test - Call with defaults
    #======================================
    m_get_file_data "m_test1_dirs" > "${TMPEXP1}"
    assert_is_not_different "${TMPEXP1}" "${EXP1}" "Test 1 failed"

    #======================================
    # Second test - Call with sort option
    #======================================
    m_get_file_data -s "m_test1_dirs" > "${TMPEXP2}"
    assert_is_not_different "${TMPEXP2}" "${EXP2}" "Test 2 failed"

    #======================================
    # Third test - sorted directories
    #======================================
    m_get_file_data -s -d "m_test1_dirs" > "${TMPEXP3}"
    assert_is_not_different "${TMPEXP3}" "${EXP3}" "Test 3 failed"

    #======================================
    # Fourth test - sorted with depth
    #======================================
    m_get_file_data -s -min 1 -max 2 "m_test1_dirs" > "${TMPEXP4}"
    assert_is_not_different "${TMPEXP4}" "${EXP4}" "Test 4 failed"

    #======================================
    # Test error pathways - setup
    #======================================
    mu_get_exp_file m_get_file_data-5 FAIL
    export M_FAIL="${FAIL}"

    mu_find_file common.funcs FUT
    sed 's/\(m_fail .*\)/\1 || return 1/g' "${FUT}" > "${MU_TMP}/common.funcs"
    ## Overwrite previous import
    import "common.funcs"
    import m_fail_record_failure

    ## Wrong arg count
    m_get_file_data "1" "2" "3" "4" "5" "6" "7" "8" && raise_failure "Failed to trap arg count error"
    ## Min depth non numeric
    m_get_file_data -s -min "wibble" -max 2 "m_test1_dirs" > /dev/null && raise_failure "Failed to trap non numeric min"
    ## Max depth non numeric
    m_get_file_data -s -min 1 -max "wibble" "m_test1_dirs" > /dev/null && raise_failure "Failed to trap non numeric min"
    ## Unrecognised option
    m_get_file_data -wibble -min 1 -max 2 "m_test1_dirs" > /dev/null && raise_failure "Failed to trap unrecognised option"
    ## Non directory 
    m_get_file_data -s -min 1 -max 2 "/var/log/messages" > /dev/null && raise_failure "Failed to trap non directory"

    #======================================
    # Compare the error messages to those 
    # expected
    #======================================
    mu_find_file m_get_file_data-5.exp EXPERR
    assert_is_not_different "${EXPERR}" "${FAIL}"

    cd - >/dev/null 2>&1
    
    #======================================
    # Cleanup
    #======================================
    [[ -f "${MU_TMP}/common.funcs" ]] && rm -f "${MU_TMP}/common.funcs"

end

#======================================
# Test for m_get_md5sum
#======================================
def Test-m_get_md5sum
   
    #======================================
    # Require our Files under Test
    #======================================
    require_file m_fail_raise_error
    require_file common.funcs
    require_file muse_mapper.funcs
    require_file m_get_md5sum.txt
    require_file m_get_md5sum.exp
    import common.funcs
    import m_fail_raise_error
    import muse_mapper.funcs

    #======================================
    # Tweak the environment for MUSE find
    #======================================
    export M_ROOT="${MU_TST}"
    mu_find_file m_get_md5sum.exp EXP

    #======================================
    # Do the test
    #======================================
    m_get_md5sum m_get_md5sum.txt MD
    assert_equal_string "${MD}" $(cat "${EXP}")

    #======================================
    # Test error pathways - setup
    #======================================
    mu_get_exp_file m_get_md5sum-1 FAIL
    export M_FAIL="${FAIL}"

    mu_find_file common.funcs FUT
    sed 's/\(m_fail .*\)/\1 || return 1/g' "${FUT}" > "${MU_TMP}/common.funcs"
    ## Overwrite previous import
    import "common.funcs"
    import m_fail_record_failure

    ## Arg count error
    m_get_md5sum m_get_md5sum.txt && raise_failure "Failed to trap incorrect arg count"
    ## Empty string arg 1
    m_get_md5sum "" 2 && raise_failure "Failed to trap empty string arg[1]"
    ## MUSE var expected
    m_get_md5sum m_get_md5sum.txt md && raise_failure "Failed to trap for MUSE var name"

    #======================================
    # Check error string against expected
    #======================================
    mu_find_file m_get_md5sum-1.exp EXPERR
    assert_is_not_different "${EXPERR}" "${FAIL}"

    #======================================
    # Cleanup
    #======================================
    [[ -f "${MU_TMP}/common.funcs" ]] && rm -f "${MU_TMP}/common.funcs"

end

#======================================
# Test for m_check_file
#======================================
def Test-m_check_file
    #======================================
    # Requires
    #======================================
    require_file m_fail_raise_error
    require_file m_fail_record_failure
    require_file m_get_usr_tag.exp
    require_file common.funcs

    import m_fail_raise_error
    import common.funcs

    #======================================
    # Run the test
    #======================================
    mu_find_file m_check_file.exp EXP
    mu_find_file m_check_file.exe CF
    m_check_file -rwx "${CF}" || raise_failure "Non zero exit code from m_check_file"

    #======================================
    # Test error pathways - setup
    #======================================
    mu_get_exp_file m_check_file FAIL
    export M_FAIL="${FAIL}"

    mu_find_file common.funcs FUT
    sed 's/\(m_fail .*\)/\1 || return 1/g' "${FUT}" > "${MU_TMP}/common.funcs"
    ## Overwrite previous import
    import "common.funcs"
    import m_fail_record_failure
    
    m_check_file "i" && raise_failure "Failed to detect arg count incorrect"
    m_check_file "-f" "" && raise_failure "Failed to detect empty arg[2]"
    m_check_file "-q" "/var/log/messages" && raise_failure "Failed to detect invalid option"

    #======================================
    # All msgs from m_fail should be in FAIL
    #======================================
    assert_is_not_different "${EXP}" "${FAIL}"
    
    #======================================
    # Cleardown for next test
    #======================================
    [[ -f "${MU_TMP}/common.funcs" ]] && rm -f "${MU_TMP}/common.funcs"


end

#======================================
# Test for m_get_usr_tag
#======================================
def Test-m_get_usr_tag
    #======================================
    # Requires
    #======================================
    require_file common.funcs
    require_file m_fail_record_failure
    require_file m_get_usr_tag.exp

    #======================================
    # Stub a tag file and rejig the env
    #======================================
    mu_get_tmp_file m_get_usr_tag TFILE
    mu_get_exp_file m_get_usr_tag FAIL
    mu_find_file m_get_usr_tag.exp EXP
    mu_find_file common.funcs FUT
    echo "m_get_usr_tag" > "${TFILE}"
    export M_USR_TAG_FILE="${TFILE}"
    export M_USER_TAG=""
    export M_FAIL="${FAIL}"
    [[ -d /tmp/m_get_usr_tag ]] || rm -rf /tmp/m_get_usr_tag

    #======================================
    # Import the test lib and rigged m_fail
    #======================================
    ## Ensure we return a fail code from test m_fail
    sed 's/\(m_fail .*\)/\1 || return 1/g' "${FUT}" > "${MU_TMP}/common.funcs"
    ## Overwrite previous import
    import "common.funcs"
    import m_fail_record_failure
    
    #======================================
    # Positive test to return tag in exported
    # M_USER_TAG var
    #======================================
    m_get_usr_tag 
    assert_equal_string "m_get_usr_tag" "${M_USR_TAG}"

    #======================================
    # Negative tests to for failure paths
    #======================================
    ## mkdir failures
    echo "blocking" > /tmp/m_get_usr_tag
    m_get_usr_tag && raise_failure "Failed to detect block on mkdir"
    ## Fail because multiline tag
    echo "secondline" >> "${TFILE}"
    m_get_usr_tag && raise_failure "Failed to detect multiline tag file"
    ## Empty tag file failure
    :>"${TFILE}"
    m_get_usr_tag && raise_failure "m_get_usr_tag failed to trap empty tag file"
    #======================================
    # All msgs from m_fail should be in FAIL
    #======================================
    assert_is_not_different "${EXP}" "${FAIL}"

    [[ -f "${MU_TMP}/common.funcs" ]] && rm -f "${MU_TMP}/common.funcs"

end

#======================================
# Test for m_get_exp_file 
#======================================
def Test-m_get_exp_file
    #======================================
    # Requires
    #======================================
    require_file common.funcs
    require_file m_fail_record_failure
    require_file m_get_exp_file.exp
    import m_fail_raise_error
    import common.funcs
   
    #======================================
    # Run the positive test
    #======================================
    M_NEWEXP="${MU_TMP}"
    m_get_exp_file Test-m_get_exp_file EXPFILE 
    if ! ls  "${MU_TMP}"/Test-m_get_exp_file.exp.[0-9]* >/dev/null 2>&1
    then
        raise_failure "Failed to create exp file with call to m_get_exp_file"
    fi

    #======================================
    # Run the negative scenarios
    #======================================
    mu_find_file common.funcs FUT
    sed 's/\(m_fail .*\)/\1 || return 1/g' "${FUT}" > "${MU_TMP}/common.funcs"
    import common.funcs
    import m_fail_record_failure
    
    ## Rig test version of m_fail
    mu_get_exp_file m_get_exp_file FAIL
    export M_FAIL="${FAIL}"

    ## Arg count
    m_get_exp_file Test-m_get_exp_file && raise_failure "Failed to trap incorrect arg count"
    ## Arg one empty string
    m_get_exp_file "" EXPFILE && raise_failure "Failed to trap empty string arg 1"
    ## Non MUSE var name in $2
    m_get_exp_file Test-m_get_exp_file expfile && raise_failure "Failed to trap non MUSE name for var"

    mu_find_file m_get_exp_file.exp EXP
    #======================================
    # All msgs from m_fail should be in FAIL
    #======================================
    assert_is_not_different "${EXP}" "${FAIL}"

    [[ -f "${MU_TMP}/common.funcs" ]] && rm -f "${MU_TMP}/common.funcs"
end
#======================================
# Test for m_get_unique_tmp_file
#======================================
def Test-m_get_unique_tmp_file
    #======================================
    # Requires
    #======================================
    require_file common.funcs
    require_file m_fail_record_failure
    require_file m_fail_raise_error
    import m_fail_raise_error
    import common.funcs

    export M_TMP="${MU_TMP}"
    
    #======================================
    # Run the positive test
    #======================================
    m_get_unique_tmp_file Test-m_get_unique_tmp_file TMPFILE
    assert_file_exists "${MU_TMP}/Test-m_get_unique_tmp_file.tmp."[0-9]*

    #======================================
    # Negative Tests
    #======================================
    mu_find_file common.funcs FUT
    sed 's/\(m_fail .*\)/\1 || return 1/g' "${FUT}" > "${MU_TMP}/common.funcs"
    import common.funcs
    import m_fail_record_failure

    ## Rig test version of m_fail
    mu_get_exp_file m_get_unique_tmp_file FAIL
    export M_FAIL="${FAIL}"

    ## Arg count
    m_get_unique_tmp_file Test-m_get_unique_tmp_file && raise_failure "Failed to trap invalid arg count"
    ## Empty string $1
    m_get_unique_tmp_file "" TMPFILE && raise_failure "Failed to trap empty string in arg 1"
    ## Invalid var name in $2
    m_get_unique_tmp_file Test-m_get_unique_tmp_file tmpfile && raise_failure "Failed to trap invlaid var name in arg 2"
    ## M_TMP not set 
    export M_TMP=
    m_get_unique_tmp_file Test-m_get_unique_tmp_file TMPFILE && raise_failure "Failed to trap M_TMP not set"
    ## Fail to write to new tmp file
    export M_TMP="/"
    m_get_unique_tmp_file Test-m_get_unique_tmp_file TMPFILE 2>/dev/null && raise_failure "Failed to trap failure to write"

    mu_find_file m_get_unique_tmp_file.exp EXP
    #======================================
    # All msgs from m_fail should be in FAIL
    #======================================
    assert_is_not_different "${EXP}" "${FAIL}"

    [[ -f "${MU_TMP}/common.funcs" ]] && rm -f "${MU_TMP}/common.funcs"
end
#======================================
# Test for m_get_tmp_file
#======================================
def Test-m_get_tmp_file
    #======================================
    # Requires
    #======================================
    require_file common.funcs
    require_file m_fail_record_failure
    require_file m_fail_raise_error
    import m_fail_raise_error
    import common.funcs

    export M_TMP="${MU_TMP}"
    
    #======================================
    # Run the positive test
    #======================================
    m_get_tmp_file Test-m_get_tmp_file TMPFILE
    assert_file_exists "${MU_TMP}/Test-m_get_tmp_file.tmp"

    #======================================
    # Negative Tests
    #======================================
    mu_find_file common.funcs FUT
    sed 's/\(m_fail .*\)/\1 || return 1/g' "${FUT}" > "${MU_TMP}/common.funcs"
    import common.funcs
    import m_fail_record_failure

    ## Rig test version of m_fail
    mu_get_exp_file m_get_tmp_file FAIL
    export M_FAIL="${FAIL}"

    ## Arg count
    m_get_tmp_file Test-m_get_unique_tmp_file && raise_failure "Failed to trap invalid arg count"
    ## Empty string $1
    m_get_tmp_file "" TMPFILE && raise_failure "Failed to trap empty string in arg 1"
    ## Invalid var name in $2
    m_get_tmp_file Test-m_get_tmp_file tmpfile && raise_failure "Failed to trap invlaid var name in arg 2"
    ## M_TMP not set 
    export M_TMP=
    m_get_tmp_file Test-m_get_tmp_file TMPFILE && raise_failure "Failed to trap M_TMP not set"
    ## Fail to write to new tmp file
    export M_TMP="/"
    m_get_tmp_file Test-m_get_tmp_file TMPFILE 2>/dev/null && raise_failure "Failed to trap failure to write"

    mu_find_file m_get_tmp_file.exp EXP
    #======================================
    # All msgs from m_fail should be in FAIL
    #======================================
    assert_is_not_different "${EXP}" "${FAIL}"

    [[ -f "${MU_TMP}/common.funcs" ]] && rm -f "${MU_TMP}/common.funcs"
end

#======================================
# Test for m_get_tmp_file
#======================================
def Test-m_get_tmp_dir
    #======================================
    # Requires
    #======================================
    require_file common.funcs
    require_file m_fail_record_failure
    require_file m_fail_raise_error
    import m_fail_raise_error
    import common.funcs

    export M_TMP="${MU_TMP}"
    
    #======================================
    # Run the positive test
    #======================================
    m_get_tmp_dir Test-m_get_tmp_dir DIR
    assert_file_is_dir "${DIR}"

    #======================================
    # Negative Tests
    #======================================
    mu_find_file common.funcs FUT
    sed 's/\(m_fail .*\)/\1 || return 1/g' "${FUT}" > "${MU_TMP}/common.funcs"
    import common.funcs
    import m_fail_record_failure

    ## Rig test version of m_fail
    mu_get_exp_file m_get_tmp_dir FAIL
    export M_FAIL="${FAIL}"

    ## Incorrect arg count
    m_get_tmp_dir Test-m_get_tmp_dir && raise_failure "Failed to trap incorrect arg count"
    ## Empty string $1
    m_get_tmp_dir "" DIR  && raise_failure "Failed to trap empty arg[1]"
    ## Invalid var name
    m_get_tmp_dir Test-m_get_tmp_dir tmpdir && raise_failure "Failed to trap invalid arg[2]"
    ## Failed to create dir
    export M_TMP="/"
    m_get_tmp_dir Test-m_get_tmp_dir DIR 2>/dev/null && raise_failure "Failed to trap Failure to create dir"

    mu_find_file m_get_tmp_dir.exp EXP
    #======================================
    # All msgs from m_fail should be in FAIL
    #======================================
    assert_is_not_different <(head -n3 "${EXP}") <(head -n3 "${FAIL}")

    assert_left_match_for_string < <(tail -n1 "${EXP}") \
        "Call to m_fail with code (2) and msg (Error: Failed to create tmp directory"

    [[ -f "${MU_TMP}/common.funcs" ]] && rm -f "${MU_TMP}/common.funcs"
end

def Test-m_clean_file
    #======================================
    # Requires
    #======================================
    require_file common.funcs
    require_file m_clean_file.src
    require_file m_fail_record_failure
    require_file m_fail_raise_error
    import m_fail_raise_error
    import common.funcs

    export M_TMP="${MU_TMP}"
    
    #======================================
    # Run the positive tests
    #======================================
    ## Write new clean version of src file
    mu_find_file m_clean_file.src SRC
    mu_get_exp_file m_clean_file CLF
    m_clean_file "${SRC}" "${CLF}"
    mu_find_file m_clean_file.exp EXP
    assert_is_not_different "${EXP}" "${CLF}"

    ## Overwrite SRC file with clean version
    TSRC="${MU_TMP}/Test-m_clean_file.src"
    cp "${SRC}" "${TSRC}" || raise_error "Failed to copy src file (${SRC}) to dst dir (${TSRC})"
    m_clean_file "${TSRC}" "${TSRC}"
    assert_is_not_different "${EXP}" "${TSRC}"

    #======================================
    # Negative tests
    #======================================
    mu_find_file common.funcs FUT
    sed 's/\(m_fail .*\)/\1 || return 1/g' "${FUT}" > "${MU_TMP}/common.funcs"
    import common.funcs
    import m_fail_record_failure

    ## Rig test version of m_fail
    mu_get_exp_file Test-m_clean_file FAIL
    export M_FAIL="${FAIL}"

    #======================================
    # Src abd dst same file
    #======================================
    ## Arg count
    cp "${SRC}" "${TSRC}" || raise_error "Failed to copy src file (${SRC}) to dst dir (${TSRC})"
    m_clean_file "${TSRC}" && raise_failure "Failed to trap incorrect arg count"
    ## Fail file perms check read
    chmod -r "${TSRC}"
    m_clean_file "${TSRC}" "${TSRC}" 2>/dev/null && raise_failure "Failed to trap perms invalid"
    ## Fail file perms check write
    chmod +r "${TSRC}"
    chmod -w "${TSRC}"
    m_clean_file "${TSRC}" "${TSRC}" 2>/dev/null && raise_failure "Failed to trap perms invalid"

    #======================================
    # Src and dst different
    #======================================
    ## Fail file perms check read
    TMP="${MU_TMP}/Test-m_clean_file.tmp"
    cp "${SRC}" "${TMP}" || raise_error "Failed to copy src file (${SRC}) to dst dir (${TSRC})"
    chmod -r "${TSRC}"
    chmod +w "${TMP}"
    m_clean_file "${TSRC}" "${TMP}" 2>/dev/null && raise_failure "Failed to trap perms invalid"
    ## Fail file perms check write
    chmod +r "${TSRC}"
    chmod -w "${TMP}"
    m_clean_file "${TSRC}" "${TMP}" 2>/dev/null && raise_failure "Failed to trap perms invalid"

    #======================================
    # Confirm we have all the correct error 
    # msgs
    #======================================
    mu_find_file m_clean_file_2.exp EXP2
    assert_is_not_different "${EXP2}" "${FAIL}"

end




