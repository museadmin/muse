#! /bin/bash
##############################################################
##
## Name         :   bootstrap
## Author       :   Bradley Atkins
## Description  :   Environment vars for MUNIT and common funcs
## Date         :   02/08/2015
## Status       :   Reviewed    [n]
##                  Tested      [n]
##                  Released    [n]
##
## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, version 2 only.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program; if not, write to the Free Software
## Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  
## USA
##
##############################################################

set -a

    #======================================
    # MUNIT test definitions
    #======================================
    MU_MUNIT_ROOT=$(echo "$(cd "$(dirname "$0")"; pwd)")

    #======================================
    # Path to MUNIT libraries
    #======================================
    MU_LIB="${MU_MUNIT_ROOT}/lib"
    MU_CTL="${MU_MUNIT_ROOT}/ctl"
    MU_TST="${MU_MUNIT_ROOT}/tst"

    #======================================
    # MUNIT control files
    #======================================
    MU_ROOT="/var/tmp/munit"
    MU_TMP="${MU_ROOT}/tmp"
    MU_RPT="${MU_ROOT}/rpt"
    MU_EXP="${MU_ROOT}/exp"
    MU_MUNIT_MAP="${MU_TMP}/mu_test_map"

    #======================================
    # Temporary runtime files
    #======================================
    MU_TEST_LOG="${MU_TMP}/mu_test_log"
    MU_TEST_BUF="${MU_TMP}/mu_test_buf"
    MU_TEST_HED="${MU_TMP}/mu_test_hed"
    MU_STDERR_BUF="${MU_TMP}/mu_error_buf"
    MU_STDOUT_BUF="${MU_TMP}/mu_stdout_buf"
    MU_ERROR_IDX="${MU_TMP}/mu_error_idx"   ## Index for error report
    MU_MASTER_RPT="${MU_RPT}/mu_master_rpt"

    #======================================
    # Global Constants
    #======================================
    MC_NAME_SEP="."
    MU_MENU_LINE_LEN=25                     ## Keep as odd numbers for centering
    MU_HEAD_LINE_LEN=75

    #======================================
    # Run Arrays 
    #======================================
    declare -a MU_RUN_ORDER
    declare -a MU_MAP_DIRS

set +a
##############################################################
##
## Name         :   mu_validate_environment
## Author       :   Bradley Atkins
## Description  :   Check we have sensible environment vars
## Date         :   07/08/2015
## Args         :   
## Status       :   Reviewed    [n]
##                  Tested      [n]
##                  Released    [n]
##                  Disabled    [n]
##############################################################
mu_validate_environment()
{
    [[ "${MU_MUNIT_ROOT}" =~ ^/.* ]] || die "MU_MUNIT_ROOT validation failed (${FUNCNAME})"
    [[ "${MU_LIB}" =~ ^/.*/lib ]] || die " MU_LIB validation failed (${FUNCNAME})"
    [[ "${MU_CTL}" =~ ^/.*/ctl ]] || die "MU_CTL validation failed (${FUNCNAME})"
    [[ "${MU_TST}" =~ ^/.*/tst ]] || die "MU_CTL validation failed (${FUNCNAME})"
    [[ "${MU_TMP}" =~ ^/.*/tmp ]] || die "MU_TMP validation failed (${FUNCNAME})"
    [[ "${MU_EXP}" =~ ^/.*/exp ]] || die "MU_EXP validation failed (${FUNCNAME})"
    [[ "${MU_MUNIT_MAP}" =~ ^/.*/mu_test_map ]] || die "MU_MUNIT_MAP validation failed (${FUNCNAME})"
    [[ "${MU_TEST_LOG}" =~ ^/.*/mu_test_log ]] || die "MU_TEST_LOG validation failed (${FUNCNAME})"
    [[ "${MU_TEST_BUF}" =~ ^/.*/mu_test_buf ]] || die "MU_TEST_BUF validation failed (${FUNCNAME})"
    [[ "${MU_TEST_HED}" =~ ^/.*/mu_test_hed ]] || die "MU_TEST_HED validation failed (${FUNCNAME})"
    [[ "${MU_STDERR_BUF}" =~ ^/.*/mu_error_buf ]] || die "MU_ERROR_BUF validation failed (${FUNCNAME})"
    [[ "${MU_MASTER_RPT}" =~ ^/.*/mu_master_rpt ]] || die "MU_MASTER_RPT validation failed (${FUNCNAME})"
    [[ -n "${MC_NAME_SEP}" ]] || die "MC_NAME_SEP validation failed (${FUNCNAME})"
    [[ "${MU_MENU_LINE_LEN}" =~ ^[[:digit:]]+$ ]] || die "MU_MENU_LINE_LEN validation failed (${FUNCNAME})"
    [[ "${MU_HEAD_LINE_LEN}" =~ ^[[:digit:]]+$ ]] || die "MU_HEAD_LINE_LEN validation failed (${FUNCNAME})"

    M_FAIL="${MU_TMP}/m_fail"
    MU_ERRORS=0
    MU_FAILURES=0
    MU_TESTS=0
    MU_ASSERTIONS=0
    MU_CMD_LINE=""
    MU_TEST_NAMES=""
    MU_CURRENT_PROJECT=""
    MU_TAR_EXPECTED_FILES=false
    MU_CLEARDOWN_LAST_RUN=true

    TMPFIL1=""
    TMPFILE2=""
    TMPFILE3=""
    TESTFILE=""
    #======================================
    # Reporting
    #======================================
    MU_TEST_LINE_PRINTED=false
    MU_FAILURE_LINE_PRINTED=false
    MU_ERROR_LINE_PRINTED=false
    read MU_TERM_HEIGHT MU_TERM_WIDTH < <(stty size)
}
##############################################################
##
## Name         :   mu_init
## Author       :   Bradley Atkins
## Description  :   Setup the run environment
## Date         :   07/08/2015
## Args         :   
## Status       :   Reviewed    [n]
##                  Tested      [n]
##                  Released    [n]
##                  Disabled    [n]
##############################################################
mu_init()
{
    #======================================
    # Create the runtime directories
    #======================================
    mkdir -p "${MU_TMP}" 2>/dev/null 
    mkdir -p "${MU_RPT}" 2>/dev/null
    mkdir -p "${MU_EXP}" 2>/dev/null
    [[ -d "${MU_TMP}" ]] || die "Failed to create tmp dir (${MU_TMP}) (${FUNCNAME})"
    [[ -d "${MU_RPT}" ]] || die "Failed to create tmp dir (${MU_RPT}) (${FUNCNAME})"
    [[ -d "${MU_EXP}" ]] || die "Failed to create tmp dir (${MU_EXP}) (${FUNCNAME})"
    
    #======================================
    # Initialise persistent global vars
    #======================================
    printf "%s" "0" > "${MU_ERROR_IDX}"
}
##############################################################
##
## Name         :   usage
## Author       :   Bradley Atkins
## Description  :   Display the usage
## Date         :   01/08/2015
## Status       :   Reviewed    [n]
##                  Tested      [n]
##                  Released    [n]
##############################################################
usage()
{
    local HEADLINE= OFS=$(( MU_HEAD_LINE_LEN / 3 ))
    mu_gen_line "=" "${MU_HEAD_LINE_LEN}" HEADLINE

    printf "%s\n" "${HEADLINE}"
    printf "\n%-${OFS}s%s\n\n" "" "MUNIT Usage Guide"
    printf "\t%s\n" "usage: ${0##*/} [-option] [file] [file] ..."
    printf "\n"
    printf "\t%s\n" "${0##*/} <test name/s>  : Run test suite/s"
    printf "\t%s\n" "${0##*/} -a <name>      : Create a new project structure"
    printf "\t%s\n" "${0##*/} -ge            : Collect all new expected results files"
    printf "\t%s\n" "${0##*/} -t             : Select project and test/s"
    printf "\t%s\n" "${0##*/} -x             : Run tests in debug mode"
    printf "\n%s\n" "${HEADLINE}"
    exit
}
##############################################################
##
## Name         :   include
## Author       :   Bradley Atkins
## Description  :   Source file passed in arg 1
## Date         :   02/08/2015
## Args         :   1 - Library to include
## Status       :   Reviewed    [n]
##                  Tested      [n]
##                  Released    [n]
##############################################################
include()
{
    [[ $# -eq 1 ]] || die "Usage. Arg[1]. Filename expected (${FUNCNAME})"
    local FILE=""

    #======================================
    # Find the file 
    #======================================
    mu_find_file "${1}" FILE 

    [[ -r "${FILE}" ]] || die "Include library (${FILE}) not a readable file (${FUNCNAME})"
    source "${FILE}" || die "Include failed for library (${FILE}) (${FUNCNAME})"
}
##############################################################
##
## Name         :   mu_check_test_suite_format
## Author       :   Bradley Atkins
## Description  :   Basic sanity checks on file format
## Date         :   02/08/2015
## Args         :   1 - Test file
## Status       :   Reviewed    [n]
##                  Tested      [n]
##                  Released    [n]
##############################################################
mu_check_test_suite_format()
{
    [[ -r "${1}" ]] || die "Usage. Arg[1]. Test file expected (${FUNCNAME})"

    local LINE= EXP="def"
    #======================================
    # Correct sequence of def - end pairs?
    #======================================
    [[ $(egrep "^def" "${1}" | wc -l) -eq $(egrep "^end" "${1}" | wc -l) ]] || die "Unequal number of \"def\" \"end\" pairs in (${1}) (${FUNCNAME})"
    for LINE in $(egrep "^def|^end" "${1}" | cut -d" " -f1)
    do
        [[ "${LINE}" == "${EXP}" ]] || die "Sequence of \"def\" \"end\" pairs failed (${FUNCNAME})"
        if [[ "${EXP}" == "def" ]]
        then
            EXP="end"
        else
            EXP="def"
        fi
    done

    [[ "${EXP}" == "def" ]] || die "Test unterminated by def statement"
}
##############################################################
##
## Name         :   mu_create_test_files
## Author       :   Bradley Atkins
## Description  :   Parse the test suites and break them out 
##                  into individual executables
## Date         :   03/08/2015
## Status       :   Reviewed    [n]
##                  Tested      [n]
##                  Released    [n]
##############################################################
mu_create_test_files()
{
    local TEST_SUITE= TMPFILE1= TMPFILE2= LINE= RCNT= UCNT= DCNT=-1
    #======================================
    # Loop through all test suites
    #======================================
    for TEST_SUITE in ${MU_TEST_NAMES}
    do
        mu_find_file "${TEST_SUITE}" TMPFILE1

        #======================================
        # Prepare and sanity check test file
        #======================================
        mu_get_tmp_file "${FUNCNAME}" TESTSUITE
        mu_clean_file "${TMPFILE1}" "${TESTSUITE}"
        mu_check_test_suite_format "${TESTSUITE}"

        #======================================
        # Loop through all tests within suite
        # and create a bash script for each one
        # SUITE_NAME.TEST_NAME.tst in MU_TMP
        # Add name to run array
        # Copy test lines into file with #!
        # Move this into a function and call it
        #======================================
        while read LINE
        do
            if [[ "${LINE}" =~ ^"TEST=" ]] 
            then
                #======================================
                # Record the testname in the run array
                #======================================
                TEST_NAME=${MU_CURRENT_PROJECT}${MC_NAME_SEP}${TEST_SUITE}${MC_NAME_SEP}$(echo "${LINE}" | cut -d"=" -f2)
                MU_RUN_ORDER[$(( MU_RUN_INDEX += 1 ))]="${TEST_NAME}"
                TEST_FILE="${MU_TMP}/${TEST_NAME}"
                printf "%s\n" "#! /bin/bash" > "${TEST_FILE}"
                [[ "${MU_DEBUG_TEST}" == "TRUE" ]] && printf "%s\n" "set -x" >> "${TEST_FILE}"
                printf "%s\n" "export THIS_TEST_NAME=${TEST_NAME}" >> "${TEST_FILE}"
                printf "%s\n" "export MU_TMP=${MU_TMP}" >> "${TEST_FILE}"
                printf "%s\n" "export MU_RPT=${MU_RPT}" >> "${TEST_FILE}"
                printf "%s\n" "export MU_TST=${MU_TST}" >> "${TEST_FILE}"
                printf "%s\n" "export MU_ERROR_IDX=${MU_ERROR_IDX}" >> "${TEST_FILE}"
                printf "%s\n" "export MU_TEST_BUF=${MU_TEST_BUF}" >> "${TEST_FILE}"

                [[ "${#MU_MAP_DIRS[@]}" -gt 0 ]] && printf "%s\n" "declare -a MU_MAP_DIRS" >> "${TEST_FILE}"
                for dir in ${MU_MAP_DIRS[@]}
                do
                    printf "%s\n" "MU_MAP_DIRS[$(( DCNT += 1))]=${dir}" >> "${TEST_FILE}"
                done
                
                #======================================
                # Add source of all libraries
                #======================================
                for f in $(ls "${MU_LIB}/"*.funcs)
                do
                    printf "%s\n" "source ${f}" >> "${TEST_FILE}"
                done

                chmod +x "${TEST_FILE}"
                MU_NUM_TESTS=$(( MU_NUM_TESTS + 1 ))
                
                #======================================
                # Create a stats file for it
                #======================================
                printf "%s" "0 0 0" > "${MU_RPT}/${TEST_NAME}.sts"
                :>"${MU_RPT}/${TEST_NAME}.rpt"
            else
                printf "%s\n" "$LINE" >> "${TEST_FILE}"
            fi
        done < <( awk '/^def/{printf "%s%s\n", "TEST=", $2;next}
                        !/^end/{printf "%s\n", $0}
                            ' FS=" " "${TESTSUITE}")
    done

    #======================================
    # Check for duplicate test names
    #======================================
    mu_get_tmp_file "${FUNCNAME}2" TMPFILE2
    for TEST_NAME in ${MU_RUN_ORDER[@]}
    do
        echo "${TEST_NAME}" >> "${TMPFILE2}"
    done
    
    if ! diff <(sort "${TMPFILE2}") <(sort -u "${TMPFILE2}") > /dev/null 2>&1
    then
        echo "==========================================================="
        echo "Duplicate names in test files"
        echo "==========================================================="
        diff <(sort "${TMPFILE2}") <(sort -u "${TMPFILE2}") | sed 's/< //g' | egrep mu_
        echo "==========================================================="
    fi
}
##############################################################
##
## Name         :   validate_cmd_line
## Author       :   Bradley Atkins
## Description  :   Check the cmd line is valid
## Date         :   02/08/2015
## Args         :   1 - Entire command line
## Status       :   Reviewed    [n]
##                  Tested      [n]
##                  Released    [n]
##############################################################
validate_cmd_line()
{
    [[ $# -eq 0 ]] && usage

    #======================================
    # Validate
    #======================================
    local FILE= OPT= PRJS= HLINE= ENV= PNAME= THIS_ASSERTION= LINE= FNAME= ANAME=
    mu_gen_line "=" "${MU_MENU_LINE_LEN}" HLINE

    while [[ $# -gt 0 ]]
    do
        case ${1} in
            -a)
                shift
                [[ $# -gt 0 ]] && usage
                
                #======================================
                # Add a new project
                #======================================
                clear
                echo "${HLINE}"
                echo "Add new project"
                echo "Enter a name, or Quit"
                echo "${HLINE}"
                read PNAME
                if [[ "${PNAME}" == "Quit" ]]
                then
                    exit
                else
                    #======================================
                    # Create the directory structure for 
                    # the new project
                    #======================================
                    mkdir "${MU_TST}/${PNAME}" || die "Failed to create new test project directory (${MU_TST}/${PNAME})"
                    mkdir "${MU_TST}/${PNAME}/bin" || die "Failed to create new test project directory (${MU_TST}/${PNAME}/bin)"
                    mkdir "${MU_TST}/${PNAME}/env" || die "Failed to create new test project directory (${MU_TST}/${PNAME}/env)"
                    mkdir "${MU_TST}/${PNAME}/resources" || die "Failed to create new test project directory (${MU_TST}/${PNAME}/resources)"
                    cp .vimrc.custom "${MU_TST}/${PNAME}/bin/" || die "Copy failed for (.vimrc.custom) to ("${MU_TST}/${PNAME}/bin")"
                    cp .vimrc.custom "${MU_TST}/${PNAME}/env/" || die "Copy failed for (.vimrc.custom) to ("${MU_TST}/${PNAME}/env")"
                    cp .vimrc.custom "${MU_TST}/${PNAME}/resources/" || die "Copy failed for (.vimrc.custom) to ("${MU_TST}/${PNAME}/resources")"
                    cp .licence "${MU_TST}/${PNAME}/bin/" || die "Copy failed for (.licence) to ("${MU_TST}/${PNAME}/bin")"
                    cp .licence "${MU_TST}/${PNAME}/env/" || die "Copy failed for (.licence) to ("${MU_TST}/${PNAME}/env")"
                    cp .licence "${MU_TST}/${PNAME}/resources/" || die "Copy failed for (.licence) to ("${MU_TST}/${PNAME}/resources")"
                    [[ -f ./.dummy.env ]] && cp ./.dummy.env "${MU_TST}/${PNAME}/env/${PNAME}.env" || 
                        die "Failed to copy dummy env (./.dummy.env)to (${MU_TST}/${PNAME}/resources)"
                    sed -i 's/_PROJECT_/'${PNAME}'/g' "${MU_TST}/${PNAME}/env/${PNAME}.env" || 
                        die "Failed to set PRJ name in env file (${MU_TST}/${PNAME}/env/${PNAME}.env)"
                    [[ -f ./.dummy.tst ]] && cp ./.dummy.tst "${MU_TST}/${PNAME}/bin/mu_test_${PNAME}" || 
                        die "Failed to copy dummy test file (./.dummy.tst) to (${MU_TST}/${PNAME}/bin/mu_test_${PNAME})"
                    #======================================
                    # Change the header metadata
                    #======================================
                    sed -i '{
                        s/_NAME_/mu_test_'${PNAME}'/g
                        s/_USER_/'${USER}'/g
                        s#_DATE_#'$(date +"%d/%m/%Y")'#g
                    }' "${MU_TST}/${PNAME}/bin/mu_test_${PNAME}"

                    #======================================
                    # Report Success
                    #======================================
                    clear
                    echo "${HLINE}"
                    echo "New Project Structure Created"
                    echo "${HLINE}"
                    find ${MU_TST}/${PNAME} -not -name ".*"
                    echo "${HLINE}"
                fi
                exit
            ;;
            -ge)
                #======================================
                # Gather all expected results files from 
                # last run.
                #======================================
                shift 
                [[ $# -eq 0 ]] && usage
                MU_TAR_EXPECTED_FILES=true
            ;;
            -la)
                #======================================
                # List all assertions in sorted order
                #======================================
                clear
                echo "${HLINE}"
                echo "Choose an Assertion"
                echo "${HLINE}"

                PS3='Select to view definition: '
                OPTIONS=($(sed 's/()//g' < <(sort < <(for f in $(ls "${MU_LIB}"); do egrep ^assert_ "${MU_LIB}/$f"; done) | tr "\n" " ")) "Quit")
                select OPT in "${OPTIONS[@]}"
                do
                    ## Choice out of range
                    [[ "${REPLY}" -gt "${#OPTIONS[@]}" ]] && continue

                    case "${OPT}" in
                        "Quit")
                            exit
                            ;;
                        *)
                            #======================================
                            # User wants to see Assertion def
                            #======================================
                            THIS_ASSERTION="${OPT}"

                            #======================================
                            # First find the file with this assert
                            #======================================
                            while read LINE
                            do
                                FNAME=$(echo "${LINE}" | cut -d":" -f1)
                                ANAME=$(echo "${LINE}" | cut -d":" -f2 | sed 's/()//g')
                                [[ "${ANAME}" == "${THIS_ASSERTION}" ]] && break
                            done < <(egrep ^assert_ "${MU_LIB}/"* 2>/dev/null)
                            [[ -n "${FNAME}" ]] || die "Failed to recover assertion file name"

                            clear

                            awk -v p=${ANAME} -v f=1 '
                                ((f == 1) && (NR == FNR) && ($0 ~ /^## Name/) && ($NF == p)) {fs = (NR -2)}
                                    ((f == 1) && (NR == FNR) && (fs != 0) && ($0 ~ /^}/)){fe = NR;f = 2}
                                        ((NR != FNR) && (FNR >= fs) && (FNR <= fe)){print}
                                            ' "${FNAME}" "${FNAME}"
                            break
                        ;;
                    esac

                done
                exit
            ;;
            mu_*)
                #======================================
                # User wants to run specific test/s
                #======================================
                MU_TEST_NAMES="${MU_TEST_NAMES} ${1}"
                shift
            ;;
            -t)
                #======================================
                # List all projects in a menu format.
                #======================================
                shift
                [[ $# -gt 0 ]] && usage

                ## Force a single column menu
                export COLUMNS=1

                if [[ -n $(ls -d tst/* 2>/dev/null | awk '{print $NF}' FS='/') ]]
                then
                    clear
                    echo "${HLINE}"
                    echo "Choose a project"
                    echo "${HLINE}"

                    PS3='Set working project: '
                    OPTIONS=($(ls -d tst/* 2>/dev/null | awk '{print $NF}' FS='/') "Quit")
                    select OPT in "${OPTIONS[@]}"
                    do
                        ## Choice out of range
                        [[ "${REPLY}" -gt "${#OPTIONS[@]}" ]] && continue
                        
                        case "${OPT}" in
                            "Quit")
                                exit
                                ;;
                            *)
                                
                                #======================================
                                # Need another menu of tests files 
                                # within the project
                                #======================================
                                MU_CURRENT_PROJECT="${OPT}"
                                clear
                                TESTS="$(ls -f tst/"${MU_CURRENT_PROJECT}"/bin/mu_test* 2>/dev/null | awk '{print $NF}' FS='/')"
                                if [[ -n "${TESTS}" ]] 
                                then
                                    echo "${HLINE}"
                                    echo "Choose a test"
                                    echo "${HLINE}"
                                    
                                    PS3='Select test to run: '
                                    OPTIONS=("All" ${TESTS} "Quit")
                                    
                                    select OPT in "${OPTIONS[@]}"
                                    do
                                        ## Choice out of range
                                        [[ "${REPLY}" -gt "${#OPTIONS[@]}" ]] && continue
                                        
                                        case "${OPT}" in 
                                            "All") 
                                                #======================================
                                                # User wants to run all tests
                                                #======================================
                                                for FILE in ${TESTS}
                                                do
                                                    MU_TEST_NAMES="${MU_TEST_NAMES} $(basename ${FILE})"
                                                done
                                                break
                                            ;;
                                            "Quit")
                                                exit
                                            ;;
                                            *)
                                                MU_TEST_NAMES="${OPT}"
                                                break
                                            ;;
                                        esac
                                    done
                                    clear
                                    break
                                else
                                    echo "${HLINE}"
                                    echo "No test files found in project (${MU_CURRENT_PROJECT})"
                                    echo "${HLINE}"
                                    exit
                                fi
                                ;;
                        esac
                    done
                    else
                    echo "${HLINE}"
                    echo "No projects found in test directory"
                    echo "${HLINE}"
                    exit
                fi
            ;;
            -x)
                #======================================
                # Turn on debug for this run
                #======================================
                MU_DEBUG_TEST="TRUE"
                shift
            ;;
        esac
    done

    #======================================
    # See if the project has an env file
    #======================================
    ENV=$(find "${MU_TST}/${MU_CURRENT_PROJECT}/env" -name "${MU_CURRENT_PROJECT}.env" 2>/dev/null)
    if [[ -n "${ENV}" ]]
    then
        if [[ -r "${ENV}" ]]
        then
            source "${ENV}" || die "Source failed for project env file (${ENV})"
        else
            die "Project env file (${ENV}) not readable"
        fi
    fi

    #======================================
    # Confirm all test names can be found
    #======================================
    for FILE in ${MU_TEST_NAMES}
    do
        mu_find_file "${FILE}" FILE
    done
}


