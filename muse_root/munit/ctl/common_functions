##############################################################
##
## Name         :   common.funcs
## Author       :   Bradley Atkins
## Description  :   Functions common to MUNIT and tests
## Date         :   02/08/2015
## Status       :   Reviewed    [n]
##                  Tested      [n]
##                  Released    [n]
##
## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, version 2 only.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program; if not, write to the Free Software
## Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  
## USA
##
##############################################################

set -a

##############################################################
##
## Name         :   mu_printm
## Author       :   Bradley Atkins
## Description  :   Centre a string in the header
## Date         :   09/08/2015
## Args         :   1 - String
## Status       :   Reviewed    [n]
##                  Tested      [n]
##                  Released    [n]
##                  Disabled    [n]
##############################################################
mu_printm()
{
    printf "%-$(( $(( MU_HEAD_LINE_LEN - ${#1} )) / 2 ))s%s\n" "" "${1}" | tee -a "${MU_MASTER_RPT}"
}
##############################################################
##
## Name         :   mu_log_line
## Author       :   Bradley Atkins
## Description  :   Write a line to the log
## Date         :   02/08/2015
## Args         :   1 - Line
##                  2 - Error Level
## Status       :   Reviewed    [n]
##                  Tested      [n]
##                  Released    [n]
##############################################################
mu_log_line()
{
    [[ "${1}" == "Failed to write to log" ]] && return

    echo "$(date): ${2}: ${1}" >> "${MU_LOG}" || die "Failed to write to log"
}
##############################################################
##
## Name         :   mu_gen_line
## Author       :   Bradley Atkins
## Description  :   Generate a line of character $1
## Date         :   06/08/2015
## Args         :   1 - Line character 
##                  2 - Length of line
##                  3 - VAR to return line in
## Status       :   Reviewed    [n]
##                  Tested      [n]
##                  Released    [n]
##                  Disabled    [n]
##############################################################
mu_gen_line()
{
    [[ $# -eq 3 ]] || die "Usage. Arg count. 3 expected (${FUNCNAME})"
    [[ "${2}" =~ ^[[:digit:]]+$ ]] || die "Usage. Arg[2]. Integer expected (${FUNCNAME})"

    local L=
    for I in $(seq "${2}")
    do
        L="${L}${1}"
    done

    eval "${3}"='${L}'
}
##############################################################
##
## Name         :   mu_clean_file
## Author       :   Bradley Atkins
## Description  :   Strip out comments etc from a file
##                  If source and dest are the same then overwrite
## Date         :   02/08/2015
## Args         :   1 - Fully qualified file name (source)
##                  2 - Fully qualified file name (output)
## Status       :   Reviewed    [n]
##                  Tested      [n]
##                  Released    [n]
##############################################################
mu_clean_file()
{
    [[ $# -eq 2 ]] || die "Error: Usage args (${FUNCNAME})"

    local SRC="${1}" DST="${2}"

    #======================================
    # Name can be basename or FQN. If base 
    # then find it
    #======================================
    [[ -f "${1}" ]] || mu_find_file "${1}" SRC
    [[ -f "${2}" ]] || mu_find_file "${2}" DST

    #======================================
    # Clean the file of comments etc.
    #======================================
    if [[ "${SRC}" == "${DST}" ]] 
    then
        local FILE
        mu_get_tmp_file ${FUNCNAME} FILE 
        sed 's/[#].*$//g' "${SRC}" | awk NF > "${FILE}"
        for s in ${PIPESTATUS[@]}; do [[ $s -eq 0 ]] || die "Error:Pipe failed 1 (${FUNCNAME})" ; done 
        mv "${FILE}" > "${SRC}" || die "Failed to overwrite target file (${DST}) (${FUNCNAME})"
    else
        sed 's/[#].*$//g' "${SRC}" | awk NF > "${DST}" || die "Failed to overwrite target file (${DST}) (${FUNCNAME})"
        for s in ${PIPESTATUS[@]}; do [[ $s -eq 0 ]] || die "Error:Pipe failed 2 (${FUNCNAME})" ; done 
    fi
}
##############################################################
##
## Name         :   mu_get_tmp_file
## Author       :   Bradley Atkins
## Description  :   Create a tmp file
## Date         :   02/08/2015
## Args         :   1 - Caller defined name
##                  2 - Variable name to return path to file
## Status       :   Reviewed    [n]
##                  Tested      [n]
##                  Released    [n]
##############################################################
mu_get_tmp_file()
{
    [[ $# -eq 2 ]] || die "Usage. Arg count. 2 expected (${FUNCNAME})"
    [[ -n "${1}" ]] || die "Usage. Arg[1]. Caller name expected"
    [[ -n "${2}" ]] || die "Variable name expected"

    local FILE="${MU_TMP}/${1}.${RANDOM}"
    while [[ -f "${FILE}" ]] 
    do
        FILE="${MU_TMP}/${1}.${RANDOM}"
    done

    :>"${FILE}"

    eval ${2}='"${FILE}"'
}
##############################################################
##
## Name         :   mu_get_exp_file
## Author       :   Bradley Atkins
## Description  :   Create a tmp file for new expected results
## Date         :   08/08/2015
## Args         :   1 - Caller defined name
##                  2 - Variable name to return path to file
## Status       :   Reviewed    [n]
##                  Tested      [n]
##                  Released    [n]
##############################################################
mu_get_exp_file()
{
    [[ $# -eq 2 ]] || die "Usage. Arg count. 2 expected (${FUNCNAME})"
    [[ -n "${1}" ]] || die "Usage. Arg[1]. Caller name expected"
    [[ -n "${2}" ]] || die "Variable name expected"

    local FILE="${MU_EXP}/${1}.exp.${RANDOM}"
    while [[ -f "${FILE}" ]] 
    do
        FILE="${MU_EXP}/${1}.exp.${RANDOM}"
    done

    :>"${FILE}"

    eval ${2}='"${FILE}"'
}
##############################################################
##
## Name         :   mu_find_file
## Author       :   Bradley Atkins
## Description  :   Find a file. If no filter set then first 
##                  search MUNIT then MUSE. 
## Date         :   02/08/2015
## Args         :   1 - file name
##                  2 - Variable name for return value
## Status       :   Reviewed    [n]
##                  Tested      [n]
##                  Released    [n]
##############################################################
mu_find_file()
{
    [[ -n "${1}" ]] || die "Usage. Arg[1]. File name expected  (${FUNCNAME})"
    [[ -n "${2}" ]] || die "Usage. Arg[2]. Variable name expected  (${FUNCNAME})"
    local FPATH= dir=
    
    #======================================
    # First search locally in MUNIT
    #======================================
    FPATH=$(find "${MU_MUNIT_ROOT}" -name "${1}" 2>/dev/null)
    if [[ -n "${FPATH}" ]]
    then
        eval "${2}"="${FPATH}"
        return
    fi

    #======================================
    # Second search the run directories
    #======================================
    FPATH=$(find "${MU_ROOT}" -name "${1}" 2>/dev/null)
    if [[ -n "${FPATH}" ]]
    then
        eval "${2}"="${FPATH}"
        return
    fi

    #======================================
    # Now traverse any directories for proj
    #======================================
    for dir in ${MU_MAP_DIRS[@]}
    do
        FPATH=$(find "${dir}" -name "${1}" 2>/dev/null)
        if [[ -n "${FPATH}" ]]
        then
            eval "${2}"="${FPATH}"
            return
        fi
    done

}

set +a
