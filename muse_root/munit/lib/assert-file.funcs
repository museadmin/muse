#! /bin/bash
##############################################################
##
## Name         :   assert-file.funcs
## Author       :   Bradley Atkins
## Description  :   MUNIT test assertions library
## Date         :   02/08/2015
## Status       :   Reviewed    [n]
##                  Tested      [n]
##                  Released    [n]
##
## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, version 2 only.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program; if not, write to the Free Software
## Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  
## USA
##
##############################################################

##############################################################
##
## Name         :   assert_file_exists
## Author       :   Bradley Atkins
## Description  :   Test file exists
## Date         :   04/08/2015
## Args         :   1 - File
##                  2 - [Err msg]
## Status       :   Reviewed    [n]
##                  Tested      [n]
##                  Released    [n]
##                  Disabled    [n]
##############################################################
assert_file_exists()
{
    MU_ASSERTIONS=$(( MU_ASSERTIONS +1 ))
    [[ -e "${1}" ]] && return 0

    MU_FAILURES=$(( MU_FAILURES +1 ))
    printf "%s\n%s\n\n" "Expected file (${1}) not found" "${2}"
    
} >> "${MU_TMP}/${THIS_TEST_NAME}.rpt"
##############################################################
##
## Name         :   assert_regular_file_exists
## Author       :   Bradley Atkins
## Description  :   Test regular file exists
## Date         :   04/08/2015
## Args         :   1 - File
##                  2 - [Err msg]
## Status       :   Reviewed    [n]
##                  Tested      [n]
##                  Released    [n]
##                  Disabled    [n]
##############################################################
assert_regular_file_exists()
{
    MU_ASSERTIONS=$(( MU_ASSERTIONS +1 ))
    [[ -f "${1}" ]] && return 0

    MU_FAILURES=$(( MU_FAILURES +1 ))
    printf "%s\n%s\n\n" "Expected file (${1}) not found" "${2}"
    
} >> "${MU_TMP}/${THIS_TEST_NAME}.rpt"
##############################################################
##
## Name         :   assert_file_not_zero
## Author       :   Bradley Atkins
## Description  :   Test regular file exists and is not 0 bytes
## Date         :   04/08/2015
## Args         :   1 - File
##                  2 - [Err msg]
## Status       :   Reviewed    [n]
##                  Tested      [n]
##                  Released    [n]
##                  Disabled    [n]
##############################################################
assert_file_not_zero()
{
    MU_ASSERTIONS=$(( MU_ASSERTIONS +1 ))
    [[ -s "${1}" ]] && return 0

    MU_FAILURES=$(( MU_FAILURES +1 ))
    printf "%s\n%s\n\n" "Expected file (${1}) not found or empty" "${2}"
    
} >> "${MU_TMP}/${THIS_TEST_NAME}.rpt"
##############################################################
##
## Name         :   assert_file_file_is_dir
## Author       :   Bradley Atkins
## Description  :   Test regular file exists and is a dir
## Date         :   04/08/2015
## Args         :   1 - File
##                  2 - [Err msg]
## Status       :   Reviewed    [n]
##                  Tested      [n]
##                  Released    [n]
##                  Disabled    [n]
##############################################################
assert_file_is_dir()
{
    MU_ASSERTIONS=$(( MU_ASSERTIONS +1 ))
    [[ -d "${1}" ]] && return 0

    MU_FAILURES=$(( MU_FAILURES +1 ))
    printf "%s\n%s\n\n" "Expected file (${1}) not a directory" "${2}"
    
} >> "${MU_TMP}/${THIS_TEST_NAME}.rpt"
##############################################################
##
## Name         :   assert_is_block_device
## Author       :   Bradley Atkins
## Description  :   Test regular file exists and is a dir
## Date         :   04/08/2015
## Args         :   1 - File
##                  2 - [Err msg]
## Status       :   Reviewed    [n]
##                  Tested      [n]
##                  Released    [n]
##                  Disabled    [n]
##############################################################
assert_is_block_device()
{
    MU_ASSERTIONS=$(( MU_ASSERTIONS +1 ))
    [[ -b "${1}" ]] && return 0

    MU_FAILURES=$(( MU_FAILURES +1 ))
    printf "%s\n%s\n\n" "File under test (${1}) is not a block device" "${2}"
    
} >> "${MU_TMP}/${THIS_TEST_NAME}.rpt"
##############################################################
##
## Name         :   assert_is_character_device
## Author       :   Bradley Atkins
## Description  :   Test file exists and is a character device
## Date         :   04/08/2015
## Args         :   1 - File
##                  2 - [Err msg]
## Status       :   Reviewed    [n]
##                  Tested      [n]
##                  Released    [n]
##                  Disabled    [n]
##############################################################
assert_is_character_device()
{
    MU_ASSERTIONS=$(( MU_ASSERTIONS +1 ))
    [[ -c "${1}" ]] && return 0

    MU_FAILURES=$(( MU_FAILURES +1 ))
    printf "%s\n%s\n\n" "File under test (${1}) is not a character device" "${2}"
    
} >> "${MU_TMP}/${THIS_TEST_NAME}.rpt"
##############################################################
##
## Name         :   assert_is_named_pipe
## Author       :   Bradley Atkins
## Description  :   Test file exists and is a named pipe
## Date         :   04/08/2015
## Args         :   1 - File
##                  2 - [Err msg]
## Status       :   Reviewed    [n]
##                  Tested      [n]
##                  Released    [n]
##                  Disabled    [n]
##############################################################
assert_is_named_pipe()
{
    MU_ASSERTIONS=$(( MU_ASSERTIONS +1 ))
    [[ -p "${1}" ]] && return 0

    MU_FAILURES=$(( MU_FAILURES +1 ))
    printf "%s\n%s\n\n" "File under test (${1}) is not a named pipe" "${2}"
    
} >> "${MU_TMP}/${THIS_TEST_NAME}.rpt"
##############################################################
##
## Name         :   assert_is_symbolic_link
## Author       :   Bradley Atkins
## Description  :   Test file exists and is a symbolic link
## Date         :   04/08/2015
## Args         :   1 - File
##                  2 - [Err msg]
## Status       :   Reviewed    [n]
##                  Tested      [n]
##                  Released    [n]
##                  Disabled    [n]
##############################################################
assert_is_symbolic_link()
{
    MU_ASSERTIONS=$(( MU_ASSERTIONS +1 ))
    [[ -h "${1}" ]] && return 0

    MU_FAILURES=$(( MU_FAILURES +1 ))
    printf "%s\n%s\n\n" "File under test (${1}) is not a symbolic link" "${2}"
    
} >> "${MU_TMP}/${THIS_TEST_NAME}.rpt"
##############################################################
##
## Name         :   assert_is_symbolic_link
## Author       :   Bradley Atkins
## Description  :   Test file exists and is a symbolic link
## Date         :   04/08/2015
## Args         :   1 - File
##                  2 - [Err msg]
## Status       :   Reviewed    [n]
##                  Tested      [n]
##                  Released    [n]
##                  Disabled    [n]
##############################################################
assert_is_symbolic_link()
{
    MU_ASSERTIONS=$(( MU_ASSERTIONS +1 ))
    [[ -h "${1}" ]] && return 0

    MU_FAILURES=$(( MU_FAILURES +1 ))
    printf "%s\n%s\n\n" "File under test (${1}) is not a symbolic link" "${2}"
    
} >> "${MU_TMP}/${THIS_TEST_NAME}.rpt"
##############################################################
##
## Name         :   assert_is_a_terminal
## Author       :   Bradley Atkins
## Description  :   Test file exists and is a terminal
## Date         :   04/08/2015
## Args         :   1 - File
##                  2 - [Err msg]
## Status       :   Reviewed    [n]
##                  Tested      [n]
##                  Released    [n]
##                  Disabled    [n]
##############################################################
assert_is_a_terminal()
{
    MU_ASSERTIONS=$(( MU_ASSERTIONS +1 ))
    [[ -t "${1}" ]] && return 0

    MU_FAILURES=$(( MU_FAILURES +1 ))
    printf "%s\n%s\n\n" "File under test (${1}) is not a terminal" "${2}"
    
} >> "${MU_TMP}/${THIS_TEST_NAME}.rpt"
##############################################################
##
## Name         :   assert_is_older_than
## Author       :   Bradley Atkins
## Description  :   Test file is older than ref
## Date         :   04/08/2015
## Args         :   1 - <reference file>
##                  2 - <file under test>
##                  3 - [Err msg]
## Status       :   Reviewed    [n]
##                  Tested      [n]
##                  Released    [n]
##                  Disabled    [n]
##############################################################
assert_is_older_than()
{
    MU_ASSERTIONS=$(( MU_ASSERTIONS +1 ))
    [[ "${2}" -ot "${1}" ]] && return 0

    MU_FAILURES=$(( MU_FAILURES +1 ))
    printf "%s\n%s\n\n" "Expected (${2}) older than (${1}) but got (${2}) newer than (${1})" "${3}"
    
} >> "${MU_TMP}/${THIS_TEST_NAME}.rpt"
##############################################################
##
## Name         :   assert_is_newer_than
## Author       :   Bradley Atkins
## Description  :   Test file is newer than ref
## Date         :   04/08/2015
## Args         :   1 - <reference file>
##                  2 - <file under test>
##                  3 - [Err msg]
## Status       :   Reviewed    [n]
##                  Tested      [n]
##                  Released    [n]
##                  Disabled    [n]
##############################################################
assert_is_newer_than()
{
    MU_ASSERTIONS=$(( MU_ASSERTIONS +1 ))
    [[ "${2}" -nt "${1}" ]] && return 0

    MU_FAILURES=$(( MU_FAILURES +1 ))
    printf "%s\n%s\n\n" "Expected (${2}) newer than (${1}) but got (${2}) older than (${1})" "${3}"
    
} >> "${MU_TMP}/${THIS_TEST_NAME}.rpt"
##############################################################
##
## Name         :   assert_is_not_different
## Author       :   Bradley Atkins
## Description  :   Test no diff for two files
## Date         :   04/08/2015
## Args         :   1 - <reference file>
##                  2 - <file under test>
##                  3 - [Err msg]
## Status       :   Reviewed    [n]
##                  Tested      [n]
##                  Released    [n]
##                  Disabled    [n]
##############################################################
assert_is_not_different()
{
    MU_ASSERTIONS=$(( MU_ASSERTIONS +1 ))
    if diff "${1}" "${2}" >/dev/null 2>&1
    then
        return 0
    fi

    MU_FAILURES=$(( MU_FAILURES +1 ))
    printf "%s\n%s\n%s\n\n" "Unexpected differences between (${1})" "and (${2})" "${3}"
    
} >> "${MU_TMP}/${THIS_TEST_NAME}.rpt"
##############################################################
##
## Name         :   assert_is_different
## Author       :   Bradley Atkins
## Description  :   Test diff for two files
## Date         :   04/08/2015
## Args         :   1 - <reference file>
##                  2 - <file under test>
##                  3 - [Err msg]
## Status       :   Reviewed    [n]
##                  Tested      [n]
##                  Released    [n]
##                  Disabled    [n]
##############################################################
assert_is_different()
{
    MU_ASSERTIONS=$(( MU_ASSERTIONS +1 ))
    if ! diff "${1}" "${2}" >/dev/null 2>&1
    then
        return 0
    fi

    MU_FAILURES=$(( MU_FAILURES +1 ))
    printf "%s\n%s\n%s\n\n" "Differences expected between (${1})" "and (${2})" "${3}"
    
} >> "${MU_TMP}/${THIS_TEST_NAME}.rpt"


