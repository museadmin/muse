#! /bin/bash
##############################################################
##
## Name         :   assert-string.funcs
## Author       :   Bradley Atkins
## Description  :   MUNIT test assertions library
## Date         :   02/08/2015
## Status       :   Reviewed    [n]
##                  Tested      [n]
##                  Released    [n]
##
## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, version 2 only.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program; if not, write to the Free Software
## Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  
## USA
##
##############################################################

##############################################################
##
## Name         :   assert_equal_string
## Author       :   Bradley Atkins
## Description  :   Test two strings for equality
## Date         :   02/08/2015
## Args         :   1 - <reference String>
##                  2 - <String under test>
##                  3 - [Err msg]
## Status       :   Reviewed    [n]
##                  Tested      [n]
##                  Released    [n]
##############################################################
assert_equal_string()
{
    MU_ASSERTIONS=$(( MU_ASSERTIONS +1 ))
    [[ "${1}" == "${2}" ]] && return 0
    
    MU_FAILURES=$(( MU_FAILURES +1 ))
    printf "%s\n%s\n" "Expected (${1}) == (${2}) but got (${1}) != (${2})" "${3}"

} > "${MU_TMP}/${THIS_TEST_NAME}.rpt"
##############################################################
##
## Name         :   assert_not_equal_string
## Author       :   Bradley Atkins
## Description  :   Test two strings for inequality
## Date         :   02/08/2015
## Args         :   1 - <reference String>
##                  2 - <String under test>
##                  3 - [Err msg]
## Status       :   Reviewed    [n]
##                  Tested      [n]
##                  Released    [n]
##############################################################
assert_not_equal_string()
{
    MU_ASSERTIONS=$(( MU_ASSERTIONS +1 ))
    [[ "${1}" != "${2}" ]] && return 0

    MU_FAILURES=$(( MU_FAILURES +1 ))
    printf "%s\n%s\n" "Expected (${1}) != (${2}) but got (${1}) == (${2})" "${3}"
    
} > "${MU_TMP}/${THIS_TEST_NAME}.rpt"
##############################################################
##
## Name         :   assert_less_than_string
## Author       :   Bradley Atkins
## Description  :   String under test is less than in ascii order
## Date         :   04/08/2015
## Args         :   1 - <reference String>
##                  2 - <String under test>
##                  3 - [Err msg]
## Status       :   Reviewed    [n]
##                  Tested      [n]
##                  Released    [n]
##############################################################
assert_less_than_string()
{
    MU_ASSERTIONS=$(( MU_ASSERTIONS +1 ))
    [[ "${2}" < "${1}" ]] && return 0

    MU_FAILURES=$(( MU_FAILURES +1 ))
    printf "%s\n%s\n" "Expected (${2}) < (${1}) but got (${2}) >= (${1})" "${3}"
    
} > "${MU_TMP}/${THIS_TEST_NAME}.rpt"
##############################################################
##
## Name         :   assert_greater_than_string
## Author       :   Bradley Atkins
## Description  :   String under test is greater than in ascii order
## Date         :   04/08/2015
## Args         :   1 - <reference String>
##                  2 - <String under test>
##                  3 - [Err msg]
## Status       :   Reviewed    [n]
##                  Tested      [n]
##                  Released    [n]
##############################################################
assert_greater_than_string()
{
    MU_ASSERTIONS=$(( MU_ASSERTIONS +1 ))
    [[ "${2}" > "${1}" ]] && return 0

    MU_FAILURES=$(( MU_FAILURES +1 ))
    printf "%s\n%s\n" "Expected (${2}) > (${1}) but got (${2}) <= (${1})" "${3}"
    
} > "${MU_TMP}/${THIS_TEST_NAME}.rpt"
##############################################################
##
## Name         :   assert_empty_string
## Author       :   Bradley Atkins
## Description  :   String under test is empty
## Date         :   04/08/2015
## Args         :   1 - <reference String>
##                  2 - [Err msg]
## Status       :   Reviewed    [n]
##                  Tested      [n]
##                  Released    [n]
##############################################################
assert_empty_string()
{
    MU_ASSERTIONS=$(( MU_ASSERTIONS +1 ))
    [[ -z "${1}" ]] && return 0

    MU_FAILURES=$(( MU_FAILURES +1 ))
    printf "%s\n%s\n" "Expected (\"\") but got (${1})" "${2}"
    
} > "${MU_TMP}/${THIS_TEST_NAME}.rpt"
##############################################################
##
## Name         :   assert_not_empty_string
## Author       :   Bradley Atkins
## Description  :   String under test is empty
## Date         :   04/08/2015
## Args         :   1 - <reference String>
##                  2 - [Err msg]
## Status       :   Reviewed    [n]
##                  Tested      [n]
##                  Released    [n]
##############################################################
assert_not_empty_string()
{
    MU_ASSERTIONS=$(( MU_ASSERTIONS +1 ))
    [[ -n "${1}" ]] && return 0

    MU_FAILURES=$(( MU_FAILURES +1 ))
    printf "%s\n%s\n" "Expected non empty string" "${2}"
    
} > "${MU_TMP}/${THIS_TEST_NAME}.rpt"

