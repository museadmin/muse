#! /bin/bash
##############################################################
##
## Name         :   munit
## Author       :   Bradley Atkins
## Description  :   Unit test harness for MUSE core functions
## Date         :   01/08/2015
## Status       :   Reviewed    [n]
##                  Tested      [n]
##                  Released    [n]
##
##              :   MUNIT is released by Bradley Atkins 
##              :   Copyright (C) 2015 info@bradleyatkins.com
##
## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, version 2 only.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program; if not, write to the Free Software
## Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  
## USA
##
##############################################################


##############################################################
##
## Name         :   cleanup
## Author       :   Bradley Atkins
## Description  :   Perform a clean exit in all states
## Date         :   01/08/2015
## Status       :   Reviewed    [n]
##                  Tested      [n]
##                  Released    [n]
##############################################################
cleanup()
{
    #======================================
    # Explicitely close any open descriptors
    # in case we are being called via ssh
    #======================================
    for fd in $(ls /proc/$$/fd); do
        case "$fd" in
            0|1|2|255)
            ;;
            *)
                eval "exec $fd>&-"
            ;;
        esac
    done
}


##############################################################
##
## Name         :   die
## Author       :   Bradley Atkins
## Description  :   Handle a fatal error
## Date         :   02/08/2015
## Status       :   Reviewed    [n]
##                  Tested      [n]
##                  Released    [n]
##############################################################
die()
{
    [[ -w "${MU_LOG}" ]] && echo "$(date): ERROR: ${1}" >> "${MU_LOG}"
    echo "$(date): ERROR: ${1}"
    exit 1
}

#======================================
# Bootstrap
#======================================
export MU_START_DIR=$(pwd)
cd "$(dirname "$0")"
source ctl/common_functions
source ./ctl/bootstrap
include user.env
include reporting.funcs

#======================================
# Check for sensible env vars
#======================================
mu_validate_environment

#======================================
# Logging
#======================================
[[ -d $(dirname "${MU_LOG}") ]] || die "Log directory does not exist. ($(dirname ${MU_LOG})) Failed install? (munit)"
[[ -w $(dirname "${MU_LOG}") ]] || die "Log directory $(dirname ${MU_LOG})) is not writable. Failed install? (munit)"
if [[ -f "${MU_LOG}" ]] 
then
    [[ -w "${MU_LOG}" ]] || die "Log (${MU_LOG}) is not writable. Failed install? (munit)"
else
    :>"${MU_LOG}" || die "Log (${MU_LOG}) is not writable. Failed install? (munit)"
fi

#======================================
# Create a unique RUN ID
#======================================
MU_RUNID=$(date +"%Y%m%d%H%M%S")
mu_log_line "Starting test run - (${MU_RUNID})" "INFO"

#======================================
# Create the runtime directories
#======================================
mkdir -p "${MU_TMP}"
mkdir -p "${MU_RPT}"
mkdir -p "${MU_EXP}"
mkdir -p "${MU_BIN}"
[[ -d "${MU_TMP}" ]] || die "Failed to create MUNIT TMP directory (${MU_TMP}) (munit)"
[[ -d "${MU_RPT}" ]] || die "Failed to create MUNIT report directory (${MU_RPT}) (munit)"
[[ -d "${MU_EXP}" ]] || die "Failed to create MUNIT exp directory (${MU_EXP}) (munit)"
[[ -d "${MU_BIN}" ]] || die "Failed to create MUNIT exp directory (${MU_EXP}) (munit)"

#======================================
# Initialise the run environment
#======================================
mu_init

#======================================
# Validate the command line
#======================================
validate_cmd_line "$@"
[[ "${MU_LOG_LEVEL}" == "DEBUG" ]] && mu_log_line "Command line validated ($@)" "INFO"

#======================================
# Cleardown run data from last run
#======================================
rm -rf "${MU_TMP}"/* || die "Cleardown of (${MU_TMP}) failed"
rm -rf "${MU_EXP}"/* || die "Cleardown of (${MU_EXP}) failed"
rm -rf "${MU_RPT}"/* || die "Cleardown of (${MU_RPT}) failed"
rm -rf "${MU_BIN}"/* || die "Cleardown of (${MU_BIN}) failed"

#======================================
# Initialise the persistent error count
#======================================
echo "0" > "${MU_ERROR_IDX}"

#======================================
# Parse the test suites and break out
# each test into its own exe
#======================================
mu_create_test_files
[[ "${MU_LOG_LEVEL}" == "DEBUG" ]] && mu_log_line "Test files created" "INFO"

#======================================
# Set some run vars
#======================================
printf "%s\n" "Errors:" > "${MU_TEST_BUF}"
mu_gen_line "=" "${MU_HEAD_LINE_LEN}" HEADLINE

#======================================
# Print the report header
#======================================
printf "%s\n" "${HEADLINE}" | tee -a "${MU_MASTER_RPT}"
mu_printm "( MUNIT ) Test Report"
mu_printm "$(date)"
mu_printm "Project - (${MU_CURRENT_PROJECT})"
printf "%s\n" "${HEADLINE}" | tee -a "${MU_MASTER_RPT}"

#======================================
# Run each test and create each report
#======================================
[[ "${MU_LOG_LEVEL}" == "DEBUG" ]] && mu_log_line "Running Tests" "INFO"
MU_RUN_INDEX=0
while [[ $(( MU_RUN_INDEX += 1 )) -le ${MU_NUM_TESTS} ]]
do
    MU_TESTS=$(( MU_TESTS +1 ))
    THISTEST=${MU_RUN_ORDER[$MU_RUN_INDEX]}

    #======================================
    # Print out each test name in order
    #======================================
    if ${MU_DISPLAY_TEST_LIST} 
    then
        if ! "${MU_TEST_LINE_PRINTED}"
        then
            printf "%s\n" "Tests:" | tee -a "${MU_MASTER_RPT}"
            MU_TEST_LINE_PRINTED=true
        fi
        printf "\t%-4d - %s\n" "${MU_TESTS}" "${THISTEST}" | tee -a "${MU_MASTER_RPT}"
    fi

    #======================================
    # Run the test
    #======================================
    :>"${MU_STDERR_BUF}"
    :>"${MU_STDOUT_BUF}"
    
    "${MU_BIN}/${THISTEST}" > "${MU_STDOUT_BUF}" 2> "${MU_STDERR_BUF}"

    if [[ -s "${MU_STDERR_BUF}" ]]
    then
        #======================================
        # The test hit a shell error, not a 
        # raised error.
        #======================================
        mu_set_error_index MU_ERROR_INDEX
        MU_ERRORS=$(( MU_ERRORS +1 ))
        printf "\n\t${MU_ERROR_INDEX} - %s\n" "${MU_RUN_ORDER[$MU_RUN_INDEX]}" >> "${MU_TEST_BUF}"
        while read LINE
        do
            printf "\t\t%s\n" "${LINE}" >> "${MU_TEST_BUF}"
        done < "${MU_STDERR_BUF}"
    fi
    
    #======================================
    # Archive stdout and stderr for test
    #======================================
    mv "${MU_STDOUT_BUF}" "${MU_RPT}/${THISTEST}.stdout"
    mv "${MU_STDERR_BUF}" "${MU_RPT}/${THISTEST}.stderr"
done
echo

#=====================================
# Concat all of the reports into one
#======================================
[[ "${MU_LOG_LEVEL}" == "DEBUG" ]] && mu_log_line "Tests completed. Compiling reports" "INFO"


#======================================
# Handle adding any failures to rpt
#======================================
MU_FAIL_INDEX=0
MU_RUN_INDEX=0

while [[ $(( MU_RUN_INDEX += 1 )) -le ${MU_NUM_TESTS} ]]
do
    #======================================
    # Report and stats files
    #======================================
    THISRPT="${MU_RPT}/${MU_RUN_ORDER[$MU_RUN_INDEX]}.rpt"
    THISSTS="${MU_RPT}/${MU_RUN_ORDER[$MU_RUN_INDEX]}.sts"
    [[ -r "${THISRPT}" ]] || die "Report (${THISRPT}) not found"
    [[ -r "${THISSTS}" ]] || die "Stats file (${THISSTS}) not found"
    #======================================
    # If report not empty then contains 
    # failures so read into master rpt
    #======================================
    if [[ -s "${THISRPT}" ]]
    then
        #======================================
        # If this is the first fail then print
        #======================================
        if ! "${MU_FAILURE_LINE_PRINTED}"
        then
            printf "%s\n" "Failures:" >> "${MU_TEST_LOG}" | tee -a "${MU_MASTER_RPT}"
            MU_FAILURE_LINE_PRINTED=true
        fi
        #======================================
        # Report name and lines from rpt
        #======================================
        printf "\n\t$(( MU_FAIL_INDEX += 1 )) - %s\n" "${MU_RUN_ORDER[$MU_RUN_INDEX]}" >> "${MU_TEST_LOG}"
        while read LINE
        do
            printf "\t\t%s\n" "${LINE}" >> "${MU_TEST_LOG}" | tee -a "${MU_MASTER_RPT}"
        done < "${THISRPT}"
    fi
    #======================================
    # Update the global metrics
    #======================================
    read assertions failures errors < "${THISSTS}"
    MU_ASSERTIONS=$(( MU_ASSERTIONS + assertions ))
    MU_FAILURES=$(( MU_FAILURES + failures ))
    MU_ERRORS=$(( MU_ERRORS + errors ))
done
printf "\n" >> "${MU_TEST_LOG}"


#======================================
# Display the test report
#======================================
[[ ${MU_ERRORS} -gt 0 ]] && grep -v -A1 '^[[:blank:]]*$' "${MU_TEST_BUF}" | grep -v '^--$' >> "${MU_TEST_LOG}"
grep -v -A1 '^[[:blank:]]*$' "${MU_TEST_LOG}" | grep -v '^--$' | tee -a "${MU_MASTER_RPT}"

if ${MU_DISPLAY_TEST_LIST} || [[ ${MU_ERRORS} -gt 0 ]] || [[ ${MU_FAILURES} -gt 0 ]]
then
    printf "%s\n" "${HEADLINE}" | tee -a "${MU_MASTER_RPT}"
fi

#======================================
# Write the metrics line
#======================================
RESSTR="(${MU_NUM_TESTS}) Tests, (${MU_ASSERTIONS}) Assertions, (${MU_FAILURES}) Failures. (${MU_ERRORS}) Errors"
mu_printm "${RESSTR}"
printf "%s\n" "${HEADLINE}" | tee -a "${MU_MASTER_RPT}"

#======================================
# Is this the 'self' test? If so we need
# to diff the master report against the
# expected report.
#======================================
if [[ "${MU_CURRENT_PROJECT}" == "self" ]]
then
    mu_find_file mu_master_rpt.exp EXPRPT
    mu_get_exp_file mu_master_rpt ACTRPT
    cp "${MU_MASTER_RPT}" "${ACTRPT}"

    if ! diff  <( tail -n +5 "${ACTRPT}")  <(tail -n +5 "${EXPRPT}") >/dev/null 2>&1
    then
        printf "%s\n\n" "${HEADLINE}"
        printf "%s\n%s\n%s\n%s\n\n" "Unexpected differences found between master report" "(${ACTRPT})" "and expected report" "(${EXPRPT})"
        diff  <( tail -n +5 "${ACTRPT}")  <(tail -n +5 "${EXPRPT}")
        printf "\n%s\n" "${HEADLINE}"
    fi
fi

#======================================
# Has user select to tar up exp files?
#======================================
if "${MU_TAR_EXPECTED_FILES}"
then
    TARGET_DIR="${MU_TST}/${MU_CURRENT_PROJECT}/resources"
    if ls "${MU_EXP}"/*.exp.* >/dev/null 2>&1
    then
        cd "${MU_EXP}"
        tarball=expected_results_$(date +"%d%m%Y%H%M%S").tar
        tar cvf "${tarball}" *.exp.* >/dev/null 2>&1 ||
            die "Failed to tar expected results in (${MU_EXP})"
        mv "${tarball}" "${TARGET_DIR}" || die "Move failed for archive (${tarball}) to (${TARGET_DIR})"
        mu_printm "Archived expected result files "
        mu_printm "(${tarball})" 
        mu_printm "moved to (${TARGET_DIR})"
    else
        mu_printm "User selected -ge option to archive new expected results but:"
        mu_printm "No expected results found in (${MU_EXP})" | tee -a "${MU_MASTER_RPT}"
    fi
    printf "%s\n" "${HEADLINE}" | tee -a "${MU_MASTER_RPT}"
fi

#======================================
# Report completion and exit
#======================================
[[ "${MU_LOG_LEVEL}" == "DEBUG" ]] && mu_log_line "Run complete for - (${MU_RUNID})" "INFO"

