#! /bin/bash

##############################################################
##
## Name         :   m_map_muse
## Author       :   Bradley Atkins
## Description  :   Map all muse files to our map file
## Date         :   18/08/2012
## Args         :   
## Status       :   Reviewed    [n]
##                  Tested      [n]
##
## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, version 2 only.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program; if not, write to the Free Software
## Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  
## USA
##
##############################################################
##############################################################
##
## Name         :   m_find_file
## Author       :   Bradley Atkins
## Description  :   Wrapper for find_file that calls m_fail
## Date         :   07/11/2013
## Args         :   1 - File name
##                  2 - Variable name to return file path
## Status       :   Reviewed    [n]
##                  Tested      [n]
##                  Released    [n]
##############################################################
m_find_file()
{
    #======================================
    # Setup and validation
    #======================================
    [[ $# -eq 2 ]] || m_fail 3 "Error: Usage args. Count - 2 expected. (${FUNCNAME})" 
    local VAR=

    if [[ -n "${M_DEV_ROOT}" ]]
    then
        VAR=$(find "${M_DEV_ROOT}" -type f -name "${1}" -print -quit 2>/dev/null)
        if [[ -n "${VAR}" ]] 
        then
            eval ${2}=${VAR}
            return 0
        fi
    fi

    VAR=$(find "${M_ROOT}" -type f -name "${1}" -print -quit 2>/dev/null)
    if [[ -n "${VAR}" ]] 
    then
        eval ${2}=${VAR}
        return 0
    fi

    return 1

}
