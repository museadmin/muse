##############################################################
##
## Name         :   master_tx
## Author       :   Bradley Atkins
## Description  :   Msg transmitter for muse.
##                  Poll msgs table for new outbound msgs and send.
##                  Each connection has own instance of tx
## Date         :   25/12/2013
## Args         :   
## Status       :   Reviewed    [n]
##                  Tested      [n]
##
## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, version 2 only.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program; if not, write to the Free Software
## Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  
## USA
##
##############################################################
#======================================
# Cleanup on exit
#======================================
cleanup()
{
    ## Change our status in the db
    echo "STOPPED" > "${TX_CTL}"
}

trap cleanup SIGINT SIGTERM SIGHUP EXIT

##############################################################
##
## Name         :   error_exit
## Author       :   Bradley Atkins
## Description  :   Write an error msg to the log and exit.
## Date         :   25/12/2013
## Args         :   1 - Error message
## Status       :   Reviewed    [n]
##                  Tested      [n]
##                  Released    [n]
##############################################################
error_exit()
{
    log_line "${1}" "ERROR"
    set +x
    exit 1
} 
##############################################################
##
## Name         :   log_line
## Author       :   Bradley Atkins
## Description  :   Write a line to the log
## Date         :   25/12/2013
## Args         :   1 - Line
##                  2 - Status INFO / WARNING / ERROR
## Status       :   Reviewed    [n]
##                  Tested      [n]
##                  Released    [n]
##############################################################
log_line()
{
    echo "$(date): ${2}: TX - ${1}" >> "${LOG}"
}

##############################################################
##
## Name         :   process_outbound_msgs 
## Author       :   Bradley Atkins
## Description  :   Look in the outbound buffer dir for new msgs
##                  to send out. If found then -
##                  Get host from file name
##                  Get Pipe
##                  Get cnxn
##                  Send
##
## Date         :   26/12/2013
## Args         :   
## Status       :   Reviewed    [n]
##                  Tested      [n]
##                  Released    [n]
##############################################################
process_outbound_msgs()
{
    local IN_BUFFER CNXN RECIPIENT FILE
    #======================================
    # Only take action if files in outbound
    # directory
    #======================================
    if ls "${M_MSG_OUT_PENDING}"/* >/dev/null 2>&1 
    then

        #======================================
        # Only take first file found each pass
        #======================================
        FILE=$(head -n 1 < <(ls "${M_MSG_OUT_PENDING}"/*))
        [[ -f "${FILE}" ]] || error_exit "Unexpected failure to find msg file. Messaging service inconsistent. TX exiting."
        [[ ${LOG_LEVEL} == "DEBUG" ]] && log_line "Message file found (${FILE})" "INFO"
        [[ ${LOG_LEVEL} == "DEBUG" ]] && log_line "Message = ($(cat ${FILE}))" "INFO"

        #======================================
        # Get the recipient field from the msg
        #======================================
        RECIPIENT=$(head -n 1 "${FILE}" | cut -d "|" -f $((M_MSG_RECIPIENT -1)))
        [[ -n ${RECIPIENT} ]] || error_exit "Recipient name not recovered from MSG file. Messaging service inconsistent. TX exiting."
        [[ ${LOG_LEVEL} == "DEBUG" ]] && log_line "Recipient (${RECIPIENT}) recovered from MSG (${FILE})" "INFO"

        #======================================
        # Is this a known recipient?
        #======================================
        [[ -n $(dig +short ${RECIPIENT}) ]] || error_exit "Recipient name (${RECIPIENT}) not resolved. Messaging service inconsistent. TX exiting."
        [[ ${LOG_LEVEL} == "DEBUG" ]] && log_line "Recipient (${RECIPIENT}) passed DNS check." "INFO"

        #======================================
        # Does it have a current connection
        #======================================
        CNXN=$(awk -v r=${RECIPIENT} '($1 == r){print $2;exit 0}' FS='|' "${SLAVE_REGISTER}")
        IN_BUFFER=$(awk -v r=${RECIPIENT} '($1 == r){print $3;exit 0}' FS='|' "${SLAVE_REGISTER}")
        [[ -n ${IN_BUFFER} ]] || return
        [[ -n ${CNXN} ]] || return ## Contention with Master SM

        ls "${CNXN}" >/dev/null 2>&1 || error_exit "Connection not found for recipient (${RECIPIENT}). (${CNXN}) expected. Messaging service inconsistent. TX exiting."
        [[ ${LOG_LEVEL} == "DEBUG" ]] && log_line "Connection found for recipient (${CNXN})" "INFO"
        
        [[ -n "${IN_BUFFER}" ]] || error_exit "Failed to find MSG inbuffer for recipient"
        [[ ${LOG_LEVEL} == "DEBUG" ]] && log_line "Msg buffer found for recipient (${IN_BUFFER})" "INFO"

        #======================================
        # Send the message
        #======================================
        RX=""
        cat "${M_MSG_OUT_PENDING}/${FILE##*/}" | ssh -S "${CNXN}" ${M_MSG_USR}@${RECIPIENT} "${IN_BUFFER}/$(hostname)_${FILE##*/}" ||
            error_exit "Failed to send msg (${FILE##*/}). Messaging service inconsistent. TX exiting." "ERROR"
        [[ ${LOG_LEVEL} == "DEBUG" ]] && log_line "MSG sent to recipient. Moving to processed directory (${M_MSG_OUT_PROCESSED})" "INFO"

        cat < <(echo "TX OK") | ssh -S "${CNXN}" ${M_MSG_USR}@${RECIPIENT} "${IN_BUFFER}/$(hostname)_${FILE##*/}.${M_MSG_OK}" ||
            error_exit "Failed to send semaphore. Messaging service inconsistent. TX exiting."

        [[ ${LOG_LEVEL} == "DEBUG" ]] && log_line "Semaphore sent to recipient" "INFO"

        #======================================
        # Sent so mv the file to the processed dir
        #======================================
        mv "${M_MSG_OUT_PENDING}/${FILE##*/}" "${M_MSG_OUT_PROCESSED}/$(hostname)_${FILE##*/}" ||
            error_exit "Failed to move sent msg to (${M_MSG_OUT_PROCESSED})"

        [[ ${LOG_LEVEL} == "DEBUG" ]] && log_line "Msg file moved from ${M_MSG_OUT_PENDING}/${FILE##*/} to ${M_MSG_OUT_PROCESSED}" "INFO"
    fi
} 

#======================================
# Start
#======================================
LOG=/tmp/master_tx_error_log

[[ $# -eq 7 ]] || error_exit "Usage args. Count, 7 expected"
[[ -w ${1} ]] || error_exit "Usage args [1]. Writable log expected"
[[ -w ${2} ]] || error_exit "Usage args [2]. Writable control file expected"
[[ -r ${3} ]] || error_exit "Usage args [3]. Readable environment file expected"
[[ -w ${4} ]] || error_exit "Usage args [4]. Writable tmp file expected"
[[ -d ${5} ]] || error_exit "Usage args [5]. Path to control directory for run expected"
[[ (${6} == "DEBUG") || (-z ${6}) ]] || error_exit "Usage args [6]. Log level validation failed"
[[ -d "${7}" ]] || error_exit "Connection directory expected to exist" "ERROR"

LOG="${1}"
TX_CTL="${2}"
ENV="${3}"
TMPFILE="${4}"
CONTROL="${5}"
LOG_LEVEL="${6}"
CNXN_DIR="${7}"

## TODO Pass in slave register rather than hard code here
SLAVE_REGISTER="${CONTROL}/slave_register"
[[ -r "${SLAVE_REGISTER}" ]] || error_exit "Slave register not found"
SLAVE_REGISTER_LOCK="${CONTROL}/slave_register.lk"

#======================================
# The control file and environment
#======================================
source "${ENV}" || error_exit "Failed to source environment file (${ENV})"

#======================================
# Log our startup environment
#======================================
if [[ ${LOG_LEVEL} == "DEBUG" ]] 
then
    log_line "Starting tx on $(hostname). All args sourced" "INFO"
    log_line "LOG = ${LOG}" "INFO"
    log_line "CONTROL FILE = ${TX_CTL}" "INFO"
    log_line "ENV = ${ENV}" "INFO"
    log_line "TMPFILE = ${TMPFILE}" "INFO"
    log_line "CONTROL DIR = ${CONTROL}" "INFO"
    log_line "LOG_LEVEL = ${LOG_LEVEL}" "INFO"
    log_line "CNXN_DIR = ${CNXN_DIR}" "INFO"
    log_line "Arg validation passed for transmitter. TX Running." "INFO"
fi

#======================================
# Poll for new msgs 
#======================================
echo "${M_TX_READY}" > "${TX_CTL}"

while :
do
    #======================================
    # Check for outbound msgs
    #======================================
    process_outbound_msgs
    
	#======================================
    # Check our control file for commands
    #======================================
    if grep "${M_TX_EXIT}" ${TX_CTL} >/dev/null 2>&1
    then
        log_line "Exit command found in CTL file (${TX_CTL}). Stopping TX" "INFO"
        exit 0
    fi

    sleep 1
done
