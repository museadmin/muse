#! /bin/bash
##############################################################
##
## Name         :   master.env
## Author       :   Bradley Atkins
## Description  :   Main environment variables for muse 
##                  master
## Date         :   30/07/2013
## Args         :   
## Status       :   Reviewed    [n]
##                  Tested      [n]
##                  Released    [n]
##############################################################
    
set -a

    M_MUSE_STATUS="MASTER"         
    M_MASTER_HOST=$(hostname)                                           ## The Master server hostname
    M_RUN_MODE="${M_RUN_MODE:-NORMAL}"                                  ## NORMAL or RECOVERY
    M_USR_GROUPS=$(groups ${USER})                                      ## Capture the user's groups

    if grep "${M_MUSEDEV}"  < <(groups ${USER}) >/dev/null 2>&1
    then
        M_IS_DEVELOPER="TRUE"
    else
        M_IS_DEVELOPER="FALSE"
    fi

    #======================================
    # Main control directories
    #======================================
    M_RUN_ROOT="${M_RUN_ROOT:-/var/tmp/muse}"                           ## Top level run dir
    M_RUN="${M_RUN_ROOT}/run/master"
    M_CONTROL_FILES="${M_RUN_ROOT}/m_system"                            ## Persistent control files 
    M_DEV_ROOT="${M_DEV_ROOT:-$HOME/.muse_dev}"                         ## Dev directory for muse_dev group
    M_MS_OBJ=/tmp/ms_obj                                                ## Directory for object suites

    #======================================
    # Tags
    #======================================
    M_USR_TAG_FILE="${M_CONTROL_FILES}/m_usr_tag_file"                  ## The tag file
    [[ -z "${M_USR_TAG}" ]] && m_get_usr_tag                            ## Might already be set by ssh call
    M_USR_TAG="${M_USR_TAG:-default}"                                   ## The user tag
    M_SYS_TAG="${M_SYS_TAG:-$(date +"%y%m%d%H%M%S")}"                   ## The system tag
    
    M_RUN_DIR="${M_RUN}/${M_USR_TAG}/${M_SYS_TAG}"                      ## Tagged run dir
    M_TMP="${M_RUN_DIR}/m_tmp"                                          ## Tmp files created during run
    M_NEWEXP="${M_RUN_DIR}/m_newexp"                                    ## New expected files created during run
    M_RESULTS="${M_RUN_DIR}/m_results"                                  ## Results dir
    M_CONTROL="${M_RUN_DIR}/m_control"                                  ## The control files for run

    M_MUSE_CTL_FILE="${M_CONTROL_FILES}/muse.ctl"                       ## Main ctl file for state machine. 
    M_ACTION_FILE="${M_CONTROL_FILES}/m_action_file"                    ## Action file for the state machine
    M_STATE_FILE="${M_CONTROL_FILES}/m_state_file"                      ## Action file for the state machine

    M_SESSION_ID=$(openssl rand 100000 | sha1sum | cut -d" " -f1)       ## Unique session id

    #======================================
    # Random
    #======================================
    M_RUN_ID=${M_RUN_ID:-$RANDOM}                                       ## Random number for run ID of this muse instance
    M_RND=${M_RND:-$RANDOM}                                             ## Random number for tmp file names etc


    M_PID_FILE="${M_CONTROL}/m_pid_file"                                ## Record the PID
    M_PID=$$                                                            ## The PID muse is running under

    #======================================
    # Logging 
    #======================================
    M_RUN_LOG="/var/log/muse/${M_USR_TAG}_${M_SYS_TAG}.log"             ## Log file for run
    M_LOG="/var/log/muse/master.log"                                    ## Master log
    M_QLOG="/var/log/muse/master_query.log"                             ## Master log of non executable calls

    #======================================
    # CMD Line Parsing and setup
    #======================================
    M_SUITE_ID=                                                         ## ID of the current suite being parsed. Top level is always 1.
                                                                        ## If suite id = 0 then finished parsing cmd line
    #M_OBJ_INDX=1                                                        ## Prepend suite name on copy to obj directory
    #======================================
    # Database
    #======================================
    M_MASTER_DB="master.db"
    M_DB_FILE="${M_CONTROL}/${M_MASTER_DB}"                             ## The master runtime schema
    M_SQLITE="sqlite3"                                                  ## Set in m_init using m_find_file
    M_DB=                                                               # Concat M_SQLITE + M_DB_FILE

    M_LAST_FAIL_MSG=                                                    ## Set to the last failure
    M_CLUSTER=                                                          ## Cluster Identifier is set in site env file

    M_FILE_INDX=1                                                       ## Unique index for tmp files
    M_BG=N                                                              ## Flag if wait after parallel jobs initiated
    M_GRP_WAIT=N                                                        ## Flag if we need to wait for a bg job or group
    M_PID_LIST=                                                         ## List of BG pids for wait function
    M_GRP_PID_LIST=                                                     ## List of group BG pids for wait function
    M_SUITE_LIST=                                                       ## List of every suite being parsed
    M_HALT_ON_ERROR="false"                                             ## Flag if remote job failed
    M_EXEC_FAILURE="${M_SYSTEM}/m_exec_failure"                         ## Exit script called via exec to kill this shell
    M_TOTAL_FAILURES=0

    M_JOB_COUNT=0                                                       ## The number of jobs being run
    M_GRP_COUNT=0                                                       ## The number of jobs as read from the grp file
    M_STDOUT=                                                           ## The out file for stdout of current job

    M_DB_LOCK="${M_TMP}/sqlite.flock"                                   ## Lock file for sqlite3 access
    M_DB_LOCK_FD=200                                                    ## File Descriptor for lock file
    M_DB_ERROR="${M_TMP}/sqlite.error"

    #======================================
    # Messaging
    #======================================
    M_CNXN_PATH=
    M_MSG_PIPE=${M_MSG_PIPE}                                            ## Name of named pipe for job ???????
    M_THREAD_ID=1                                                       ## MSG thread id
    M_TX_CTL="${M_CONTROL}/tx.ctl"                                      ## Main tx control file
    M_RX_CTL="${M_CONTROL}/rx.ctl"                                      ## Main rx control file

    M_ACTION=                                                           ## Action for state machine

    M_NUM_JOBS=0                                                        ## Number of jobs to be run

    M_LAST_STATUS=                                                      ## Generic exit status msg

    M_SUITE_START="$(date)"
    M_SUITE_FINISH=

    #======================================
    # Screen files
    #======================================
    M_MAIN_SCREEN_HEAD="${M_CONTROL}/screen_head"
    M_MAIN_SCREEN_FOOT="${M_CONTROL}/screen_foot"
    M_MAIN_SCREEN_BODY="${M_CONTROL}/screen_body"

    #======================================
    # CXNX 
    #======================================
    M_OPEN_CNXNS=0
    M_CLOSED_CNXNS=0

    #======================================
    # Shutdown
    #======================================
    M_SLAVE_EXIT_TO=30                                                  ## Timeout waiting for slaves to exit

    #======================================
    # Slave Handling
    #======================================
    M_SLAVE_TALLY=0

    #======================================
    # TODO Deprecated  ?
    #======================================
    M_SSH_CFG=
    M_CTL_DIR=
    M_CNXN_MGR=
    M_CNXN_MGR_PID=
    M_CNXN_DIR=
    M_CNXN_CTL_FILE=
    M_CNXN_STATUS_FILE=
    M_GRP_CTRL="${M_GRP_DATA:-$M_CONTROL/m_grp_ctrl_$M_RND}"            ## Main control file for the scripts to be run
    M_JOB_CTRL="${M_JOB_CTRL:-$M_CONTROL/m_job_ctrl_$M_RND}"            ## Main control file for the scripts to be run


    M_JOB_FILE=                                                         ## Point to current job control file
    M_JOB_ID=${M_JOB_ID:-1}                                             ## Job control fields
    M_JOB_NAME=
    M_JOB_PATH=
    M_JOB_HOST=${HOSTNAME%%.*}
    M_SLAVE=
    M_JOB_GRP=
    M_JOB_PID=
    M_JOB_FINISH=
    M_JOB_WAIT=${M_JOB_WAIT:-N}
    M_JOB_BG=${M_JOB_BG:-N}
    M_JOB_FINISH=
    M_JOB_START=
    M_JOB_DURATION=
    M_TIMER_BASE_NAME="${M_CONTROL}/m_timer_"                           ## Base name for the timer control files
    M_TIMER_Q="${M_CONTROL}/m_timer_q"                                  ## The active timer queue file
    M_SITE_ENV="${HOME}/muse_run_time_environment/site.env"             ## Site Specific environment variables; all begin MUSE_SITE_<*>
set +a
