##############################################################
##
## Name         :   Time functions for muse
## Author       :   Bradley Atkins
## Description  :   
## Date         :   19/10/2013
## Args         :   
## Status       :   Reviewed    [n]
##                  Tested      [n]
##
## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, version 2 only.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program; if not, write to the Free Software
## Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  
## USA
##
##############################################################
##############################################################
##
## Name         :   m_get_epoch_milliseconds
## Author       :   Bradley Atkins
## Description  :   Return the epoch time in milli seconds
## Date         :   06/04/2014
## Args         :   1 - Name of variable to return value in
## Status       :   Reviewed    [n]
##                  Tested      [n]
##                  Released    [n]
##############################################################
m_get_epoch_milliseconds()
{
    [[ ${1} =~ ^[A-Z0-9_]+$ ]] || m_fail 2 "Error: MUSE variable name expected (${FUNCNAME})" 
    local T="$(($(date +%s%N)/1000000))"
    [[ ${T} =~ ^[[:digit:]]+$ ]] || m_fail 2 "Error: Failed to recover epoch time. (${FUNCNAME})" 
    eval ${1}=${T}
}
##############################################################
##
## Name         :   m_get_epoch_seconds
## Author       :   Bradley Atkins
## Description  :   Return a date time as epoch seconds
## Date         :   24/09/2012
## Args         :   1- Optional time string, e.g. -
##                  "Jan 1, 1980 00:00:01"
##                  "January 1, 1980 23:59:59"
##                  "January 1 1980 23:59:59"
##                  "1980/1/1 00:00:01"
## Status       :   Reviewed    [n]
##                  Tested      [n]
##                  Released    [n]
##############################################################
m_get_epoch_seconds()
{
    [[ $# -gt 1 ]] && return 1

    local TIME="$(date +%s)"

    [[ $# -eq 1 ]] && TIME=$(date +%s -d "${1}" 2>/dev/null)   
    [[ $? -eq 0 ]] || return 2

    echo "${TIME}"
}
##############################################################
##
## Name         :   m_get_duration
## Author       :   Bradley Atkins
## Description  :   Return the duration (diff) between a start
##                  and an end time.
## Date         :   26/09/2012
## Args         :   
## Status       :   Reviewed    [n]
##                  Tested      [n]
##                  Released    [n]
##############################################################
m_get_duration()
{
    [[ $# -eq 2 ]] || m_fail 1 "Error: Usage args (${FUNCNAME})"
    
    local TM1="${1}" TM2="${2}" SECS1 SECS2 SECS

    SECS1=$(m_get_epoch_seconds "${TM1}") || m_fail 1 "Error: Incorrect time format for conversion (${TM1}) (${FUNCNAME})"
    SECS2=$(m_get_epoch_seconds "${TM2}") || m_fail 1 "Error: Incorrect time format for conversion (${TM2}) (${FUNCNAME})"

    [[ ${SECS2} -ge ${SECS1} ]] || m_fail 1 "Error: Negative time (${FUNCNAME})" 

    SECS=$(( SECS2 - SECS1 ))

    M_JOB_DURATION=$(printf ""%dh:%dm:%ds"\n" $((${SECS}/3600)) $((${SECS}%3600/60)) $((${SECS}%60)))
}
##############################################################
##
## Name         :   m_get_date_from_epoch
## Author       :   Bradley Atkins
## Description  :   Convert an epoch time string (secs) to
##                  a human readable date format.
## Date         :   24/09/2012
## Args         :   1 - Valid date format string
##                  2 - Time (Epoch Seconds) '@nnnnnnnn'
##              e.g. -
##                  "%d/%m/%Y" "@2147483647"
##                  "%d/%m/%Y %H:%M:%S" "@2147483647"
##                  "%d/%m/%y" "@2147483647"
## Status       :   Reviewed    [n]
##                  Tested      [n]
##                  Released    [n]
##############################################################
m_get_date_from_epoch()
{
    ## Usage
    [[ $# -eq 2 ]] || return 1
    
    local FORMAT= EPOCH=

    [[ $# -eq 2 ]] && FORMAT="+\"${1}\""

    [[ ${2} =~ ^[@]+[[:digit:]]+$ ]] || return 2

    eval date --date="${2}" "${FORMAT}" || return 3
}
##############################################################
##
## Name         :   m_get_hms
## Author       :   Bradley Atkins
## Description  :   Convert epoch seconds to HMS
## Date         :   26/09/2012
## Args         :   1 - Epoch secs
## Status       :   Reviewed    [n]
##                  Tested      [n]
##                  Released    [n]
##############################################################
m_get_hms()
{
    [[ $# -eq 1 ]] || m_fail 1 "Error: Usage args (${FUNCNAME})"
    [[ ${1} =~ ^[[:digit:]]+$ ]] || m_fail 1 "Error: Usage format (${FUNCNAME})" 

    printf ""%dh:%dm:%ds"\n" $(($SECS/3600)) $(($SECS%3600/60)) $(($SECS%60))
}
