#! /bin/bash
##############################################################
##
## Name         :   Time functions for muse
## Author       :   Bradley Atkins
## Description  :   
## Date         :   19/10/2013
## Args         :   
## Status       :   Reviewed    [n]
##                  Tested      [n]
##
## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, version 2 only.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program; if not, write to the Free Software
## Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  
## USA
##
##############################################################
##############################################################
##
## Name         :   m_get_epoch_milliseconds
## Author       :   Bradley Atkins
## Description  :   Return the epoch time in milli seconds
## Date         :   06/04/2014
## Args         :   1 - Name of variable to return value in
## Status       :   Reviewed    [n]
##                  Tested      [n]
##                  Released    [n]
##############################################################
m_get_epoch_milliseconds()
{
    [[ $# -eq 1 ]] || m_fail 2 "Error: Usage. Arg count. 1 expected (${FUNCNAME})" 
    [[ ${1} =~ ^[A-Z0-9_]+$ ]] || m_fail 2 "Error: MUSE variable name expected (${FUNCNAME})" 
    local T="$(($(date +%s%N)/1000000))"
    [[ ${T} =~ ^[[:digit:]]+$ ]] || m_fail 2 "Error: Failed to recover epoch time. (${FUNCNAME})" 
    eval ${1}=${T}
}
##############################################################
##
## Name         :   m_get_epoch_seconds
## Author       :   Bradley Atkins
## Description  :   Return a date time as epoch seconds
## Date         :   24/09/2012
## Args         :   1- Optional time string, e.g. -
##                  "Jan 1, 1980 00:00:01"
##                  "January 1, 1980 23:59:59"
##                  "January 1 1980 23:59:59"
##                  "1980/1/1 00:00:01"
##                  2 - Variable to return value
## Status       :   Reviewed    [n]
##                  Tested      [n]
##                  Released    [n]
##############################################################
m_get_epoch_seconds()
{
    [[ ($# -eq 1) || ($# -eq 2) ]] || m_fail 2 "Error: Usage. Arg count. 1 or 2 expected (${FUNCNAME})" 
    [[ -n "${1}" ]] || m_fail 2 "Error: Usage. Arg[1]. Time string or variable name expected (${FUNCNAME})" 
    if [[ $# -eq 2 ]]
    then
        [[ -n "${2}" ]] || m_fail 2 "Error: Usage. Arg[2]. Variable name expected (${FUNCNAME})" 
    fi

    if [[ $# -eq 2 ]]
    then
        TIME=$(date +%s -d "${1}" 2>/dev/null)
        [[ $? -eq 0 ]] || m_fail 2 "Error: Conversion failed for (${1}) (${FUNCNAME})" 
        eval "${2}"="${TIME}"
    else
        local TIME="$(date +%s)"
        eval "${1}"="${TIME}"
    fi
}
##############################################################
##
## Name         :   m_get_duration
## Author       :   Bradley Atkins
## Description  :   Return the duration (diff) between a start
##                  and an end time.
## Date         :   26/09/2012
## Args         :   1 - Start Time
##                  2 - Finish Time
##                  3 - Variable for return value
## Status       :   Reviewed    [n]
##                  Tested      [n]
##                  Released    [n]
##############################################################
m_get_duration()
{
    [[ $# -eq 3 ]] || m_fail 1 "Error: Usage. arg count. 3 expected (${FUNCNAME})"
    [[ -n "${1}" ]] || m_fail 1 "Error: Usage. Arg[1]. Time string expected (${FUNCNAME})" 
    [[ -n "${2}" ]] || m_fail 1 "Error: Usage. Arg[2]. Time string expected (${FUNCNAME})" 
    [[ -n "${3}" ]] || m_fail 1 "Error: Usage. Arg[3]. Variable name expected (${FUNCNAME})" 
    
    local TM1="${1}" TM2="${2}" SECS1= SECS2= SECS= D=

    m_get_epoch_seconds "${TM1}" SECS1 || m_fail 2 "Error: Conversion failed for (${TM1}) (${FUNCNAME})" 
    m_get_epoch_seconds "${TM2}" SECS2 || m_fail 2 "Error: Conversion failed for (${TM2}) (${FUNCNAME})" 

    [[ ${SECS2} -ge ${SECS1} ]] || m_fail 1 "Error: Negative time (${FUNCNAME})" 

    SECS=$(( SECS2 - SECS1 ))

    D=$(printf ""%dh:%dm:%ds"\n" $((${SECS}/3600)) $((${SECS}%3600/60)) $((${SECS}%60)))

    eval "${3}"="${D}"
}
##############################################################
##
## Name         :   m_get_date_from_epoch
## Author       :   Bradley Atkins
## Description  :   Convert an epoch time string (secs) to
##                  a human readable date format.
## Date         :   24/09/2012
## Args         :   1 - Valid date format string
##                  2 - Time (Epoch Seconds) '@nnnnnnnn'
##                  3 - Variable name for return value
##              e.g. -
##                  "%d/%m/%Y" "@2147483647"
##                  "%d/%m/%Y %H:%M:%S" "@2147483647"
##                  "%d/%m/%y" "@2147483647"
## Status       :   Reviewed    [n]
##                  Tested      [n]
##                  Released    [n]
##############################################################
m_get_date_from_epoch()
{
    [[ $# -eq 3 ]] || m_fail 2 "Error: Usage. Arg count. 3 expected (${FUNCNAME})" 
    [[ -n "${1}" ]] || m_fail 2 "Error: Usage. Arg[1]. Valid time format string expected (${FUNCNAME})" 
    [[ ${2} =~ ^[@]{1}[[:digit:]]+$ ]] || m_fail 2 "Error: Usage. Arg[2]. Epoch string expected (${FUNCNAME})" 
    [[ -n "${3}" ]] || m_fail 2 "Error: Usage. Arg[3]. Variable name expected (${FUNCNAME})" 
    
    local EPOCH= FORMAT="+\"${1}\"" TS=

    #======================================
    # Let date throw a fail for us
    #======================================
    date --date="${2}" +"${1}" > /dev/null 2>&1 || 
        m_fail 2 "Error: Failed to convert seconds (${2}) to timestamp (${1}) (${FUNCNAME})" 
    
    TS=$(date --date="${2}" +"${1}")
    
    eval "${3}"='${TS}'
}
##############################################################
##
## Name         :   m_get_hms
## Author       :   Bradley Atkins
## Description  :   Convert epoch seconds to HMS
## Date         :   26/09/2012
## Args         :   1 - Epoch secs
##                  2 - Var name for return value
## Status       :   Reviewed    [n]
##                  Tested      [n]
##                  Released    [n]
##############################################################
m_get_hms()
{
    [[ $# -eq 2 ]] || m_fail 1 "Error: Usage. Arg count. 2 expected (${FUNCNAME})"
    [[ ${1} =~ ^[[:digit:]]+$ ]] || m_fail 1 "Error: Usage. Arg[1]. Integer expected (${FUNCNAME})" 
    [[ -n "${2}" ]] || m_fail 2 "Error: Usage. Arg[2]. Variable name expected (${FUNCNAME})" 
    local SECS="${1}"

    eval ${2}=$(printf "%dh:%dm:%ds" $(($SECS/3600)) $(($SECS%3600/60)) $(($SECS%60)))
}
