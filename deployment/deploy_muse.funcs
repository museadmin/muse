#! /bin/bash
##############################################################
##
## Name         :   deploy_muse.funcs
## Author       :   Bradley Atkins
## Description  :   Support functions for deployer
## Date         :   23/08/2015
## Status       :   Reviewed    [n]
##                  Tested      [n]
##                  Released    [n]
##############################################################

##############################################################
##
## Name         :   get_hosts_for_cluster
## Author       :   Bradley Atkins
## Description  :   Return a list of hostnames from muse.hosts
##                  for a given cluster
## Date         :   23/08/2015
## Args         :   1 - cluster name or pattern
##                  2 - FQNAME | SNAME
##                  3 - Return Variable for list
## Status       :   Reviewed    [n]
##                  Tested      [n]
##                  Released    [n]
##############################################################
get_hosts_for_cluster()
{
    #======================================
    # Validate
    #======================================
    [[ -d "${MUSE_ROOT}" ]] || die "MUSE_ROOT not set (${FUNCNAME})" "ERROR"
    [[ $# -eq 3 ]] || die "Usage. Arg count. 3 expected"
    [[ -n "${1}" ]] || die "Usage. Arg[1]. Cluster name expected (${FUNCNAME})"
    [[ ("${2}" == "FQNAME") || ("${2}" == "${SNAME}") ]] || die "Usage arg[2]. FQNAME or SNAME expected (${FUNCNAME})"
    [[ -n "${3}" ]] || die "Usage. Arg[2]. Variable name expected (${FUNCNAME})"

    #======================================
    # Find the hosts file for MUSE
    #======================================
    local MHOSTS="${MUSE_ROOT}/user/muse.hosts"
    [[ -r "${MHOSTS}" ]] || die "Failed to find readable muse.hosts file below (${MUSE_ROOT}) (${FUNCNAME})"
    
    #======================================
    # Need MUSE defaults to read hosts 
    #======================================
    local DEFS="${MUSE_ROOT}/user/defaults.env"
    [[ -r "${DEFS}" ]] || die "Failed to find readable user environement (${DEFS})"
    source "${DEFS}" || die "Failed to source (${DEFS})"
    
    #======================================
    # Pull out all of the names for cluster
    #======================================
    [[ (-n ${HOSTS_DELIMITER}) && (-n ${COLUMN_ORDER}) ]] || die 1 "Hosts env vars not set (${FUNCNAME})"

    local OLDIFS="${IFS}" STR=""
    IFS="${HOSTS_DELIMITER}"

    while eval read ${COLUMN_ORDER}
    do
        if ! ${DEPLOY_MUSE_TO_FWL}
        then
            [[ "${TYPE}" == "FWL" ]] && continue
        fi

        if [[ "${CLUSTER}" == *"${1}"* ]]
        then
            if [[ "${2}" == "FQNAME" ]]
            then
                STR="${STR} ${FQNAME}"
            else
                STR="${STR} ${SNAME}"
            fi
        fi
    done < <(sed 's/[#].*$//g' "${MHOSTS}" | awk NF)
   
    IFS="${OLDIFS}"

    eval ${3}='"${STR}"'
}

##############################################################
##
## Name         :   get_host_from_cluster
## Author       :   Bradley Atkins
## Description  :   Return a hostname from muse.hosts from a 
##                  specific cluster for a specifc type
## Date         :   23/08/2015
## Args         :   1 - cluster name or pattern
##                  2 - FQNAME | SNAME
##                  3 - TYPE
##                  4 - Return Variable for host
## Status       :   Reviewed    [n]
##                  Tested      [n]
##                  Released    [n]
##############################################################
get_host_from_cluster()
{
    #======================================
    # Validate
    #======================================
    [[ -d "${MUSE_ROOT}" ]] || die "MUSE_ROOT not set (${FUNCNAME})" "ERROR"
    [[ $# -eq 4 ]] || die "Usage. Arg count. 3 expected"
    [[ -n "${1}" ]] || die "Usage. Arg[1]. Cluster name expected (${FUNCNAME})"
    [[ ("${2}" == "FQNAME") || ("${2}" == "${SNAME}") ]] || die "Usage arg[2]. FQNAME or SNAME expected (${FUNCNAME})"
    [[ -n "${3}" ]] || die "Usage. Arg[3]. Variable name expected (${FUNCNAME})"
    [[ -n "${4}" ]] || die "Usage. Arg[4]. Variable name expected (${FUNCNAME})"

    #======================================
    # Find the hosts file for MUSE
    #======================================
    local MHOSTS="${MUSE_ROOT}/user/muse.hosts"
    [[ -r "${MHOSTS}" ]] || die "Failed to find readable muse.hosts file below (${MUSE_ROOT}) (${FUNCNAME})"
    
    #======================================
    # Need MUSE defaults to read hosts 
    #======================================
    local DEFS="${MUSE_ROOT}/user/defaults.env"
    [[ -r "${DEFS}" ]] || die "Failed to find readable user environment (${DEFS})"
    source "${DEFS}" || die "Failed to source (${DEFS})"
    
    #======================================
    # Pull out all of the names for cluster
    #======================================
    [[ (-n ${HOSTS_DELIMITER}) && (-n ${COLUMN_ORDER}) ]] || die 1 "Hosts env vars not set (${FUNCNAME})"

    local OLDIFS="${IFS}" STR=""
    IFS="${HOSTS_DELIMITER}"

    while eval read ${COLUMN_ORDER}
    do
        if [[ "${CLUSTER}" == *"${1}"* ]]
        then
            if [[ "${TYPE}" == "${3}" ]]
            then
                if [[ "${2}" == "FQNAME" ]]
                then
                    STR="${STR} ${FQNAME}"
                else
                    STR="${STR} ${SNAME}"
                fi
                break
            fi
        fi
    done < <(sed 's/[#].*$//g' "${MHOSTS}" | awk NF)
   
    IFS="${OLDIFS}"

    eval ${4}='$(echo "${STR}" | xargs)'
}
##############################################################
##
## Name         :   get_clusters_from_hosts
## Author       :   Bradley Atkins
## Description  :   Return a list of cluster names from muse.hosts
## Date         :   23/08/2015
## Args         :   
## Status       :   Reviewed    [n]
##                  Tested      [n]
##                  Released    [n]
##############################################################
get_clusters_from_hosts()
{
    #======================================
    # Validate
    #======================================
    [[ -d "${MUSE_ROOT}" ]] || die "MUSE_ROOT not set (${FUNCNAME})" "ERROR"
    [[ $# -eq 1 ]] || die "Usage. Arg count. 1 expected"
    [[ -n "${1}" ]] || die "Usage. Arg[1]. Variable name expected (${FUNCNAME})"

    #======================================
    # Find the hosts file for MUSE
    #======================================
    local MHOSTS="${MUSE_ROOT}/user/muse.hosts"
    [[ -r "${MHOSTS}" ]] || die "Failed to find readable muse.hosts file below (${MUSE_ROOT}) (${FUNCNAME})"
    
    #======================================
    # Need MUSE defaults to read hosts 
    #======================================
    local DEFS="${MUSE_ROOT}/user/defaults.env"
    [[ -r "${DEFS}" ]] || die "Failed to find readable user environment (${DEFS})"
    source "${DEFS}" || die "Failed to source (${DEFS})"
    
    #======================================
    # Pull out all of the names for cluster
    #======================================
    [[ (-n ${HOSTS_DELIMITER}) && (-n ${COLUMN_ORDER}) ]] || die 1 "Hosts env vars not set (${FUNCNAME})"

    local OLDIFS="${IFS}" STR= TSTR=
    IFS="${HOSTS_DELIMITER}"

    while eval read ${COLUMN_ORDER}
    do
        STR="${STR} ${CLUSTER}"
    done < <(sed 's/[#].*$//g' "${MHOSTS}" | awk NF)
   
    IFS="${OLDIFS}"

    #======================================
    # Return a sorted unique list 
    #======================================
    TSTR=$(echo "${STR}" | tr " " "\n" | sort -u | tr "\n" " ")
    
    eval ${1}='"${TSTR}"'
}
##############################################################
##
## Name         :   get_menu_item
## Author       :   Bradley Atkins
## Description  :   Display a menu and return the selction
## Date         :   23/08/2015
## Args         :   1 - Prompt string
##                  2 - Return var
##                  3 - List of menu items
## Status       :   Reviewed    [n]
##                  Tested      [n]
##                  Released    [n]
##############################################################
get_menu_item()
{
    #======================================
    # Validate
    #======================================
    [[ $# -ge 3 ]] || die "Usage. Arg count. 3 or greater expected (${FUNCNAME})"
    [[ -n "${1}" ]] || die "Usage. Arg[1]. Cluster name expected (${FUNCNAME})"
    [[ -n "${2}" ]] || die "Usage. Arg[2]. Variable name expected (${FUNCNAME})"

    #======================================
    # Create the menu
    #======================================
    PS3="${1}: "
    local ARGS=("$@") 
    OPTIONS=(${ARGS[@]:2})
    select OPT in "${OPTIONS[@]}"
    do
        ## Choice out of range
        [[ "${REPLY}" -gt "${#OPTIONS[@]}" ]] && continue
        break
    done
    #======================================
    # Return the value to caller
    #======================================
    eval ${2}='"${OPT}"'
}
##############################################################
##
## Name         :   create_ssh_cfg
## Author       :   Bradley Atkins
## Description  :   Create an ssh config file for cluster hosts
## Date         :   23/08/2015
## Args         :   1 - Filename
##                  2 - Cluster name
##                  3 - User
##                  * - List of hosts
## Status       :   Reviewed    [n]
##                  Tested      [n]
##                  Released    [n]
##############################################################
create_ssh_cfg()
{
    #======================================
    # Validate
    #======================================
    [[ -n "${1}" ]] || die "Usage. Arg[1]. Writable file expected (${FUNCNAME})"
    [[ -n "${2}" ]] || die "Usage. Arg[2]. Cluster name expected (${FUNCNAME})"
    [[ -n "${3}" ]] || die "Usage. Arg[3]. Cluster name expected (${FUNCNAME})"

    local ARGS=("$@") THIS_FWL= THOST=
    local HOST_NAMES=(${ARGS[@]:3})

    :> "${1}" || die "Failed to zero CFG file (${1}) (${FUNCNAME})"

    case "${SSH_TYPE}" in
        1)
            #======================================
            # FWL is used as SSH Proxy
            #======================================
            local THIS_FWL=
            get_host_from_cluster "${2}" FQNAME "FWL" THIS_FWL
            [[ -n "${THIS_FWL}" ]] || die "Failed to retrieve firewall settings from muse.hosts for cluster (${2})"

            for THOST in ${HOST_NAMES[@]}
            do
                printf "%s\n" "Host : ${THOST}" >> "${1}"
                printf "%s\n" "Hostname ${THOST}" >> "${1}"
                printf "%s\n" "User ${3}" >> "${1}"
                printf "%s\n" "ForwardAgent yes" >> "${1}"
                printf "%s\n" "ProxyCommand ssh ${3}@${THIS_FWL} nc %h %p" >> "${1}"
                printf "%s\n\n" "IdentityFile ${SSH_DEP_KEY}" >> "${1}"
            done
            
            printf "%s\n" "Host *" >> "${1}"
            printf "%s\n" "SendEnv LANG LC_*" >> "${1}"
            printf "%s\n" "HashKnownHosts yes" >> "${1}"
            printf "%s\n" "GSSAPIAuthentication yes" >> "${1}"
            printf "%s\n" "GSSAPIDelegateCredentials no" >> "${1}"
            printf "%s\n" "ServerAliveInterval ${SSH_INTVL}" >> "${1}"
            printf "%s\n" "ForwardAgent ${SSH_FWD}" >> "${1}"
            printf "%s\n" "StrictHostKeyChecking ${SSH_KEY_CHK}" >> "${1}"
            printf "%s\n" "UserKnownHostsFile=${SSH_KNOWN_HSTS}" >> "${1}"
            ;;
        2)
            ;;
        3)
            ;;
    esac

}
##############################################################
##
## Name         :   deploy_muse_to_cluster
## Author       :   Bradley Atkins
## Description  :   Deploy MUSE to a named cluster
## Date         :   24/08/2015
## Args         :   1 - Cluster name or pattern
## Status       :   Reviewed    [n]
##                  Tested      [n]
##                  Released    [n]
##############################################################
deploy_muse_to_cluster()
{
    [[ $# -eq 1 ]] || die "Usage. Arg count. 1 expected (${FUNCNAME})"
    [[ -n ${1} ]] || die "Usage. Arg[1]. Cluster name expected (${FUNCNAME})"
    local THIS_CLUSTER="${1}"

    #======================================
    # Set get_cluster to echo name?
    #======================================
    if "${PRIME_GET_CLUSTER}"
    then
        [[ -r "${GET_CLUSTER}" ]] || die "PRIME_GET_CLUSTER is true but path to get_cluster indefined"
        sed 's/_CLUSTER_NAME_/'"${THIS_CLUSTER}"'/g' "${GET_CLUSTER}.template" > "${GET_CLUSTER}"
    fi

    #======================================
    # Create an ssh_config file for scp
    #======================================
    create_ssh_cfg "${SELF_ROOT}/${SSH_DEP_CFG}"  "${THIS_CLUSTER}" "${SSH_DEP_USR}" "${DHOSTS}"
    create_ssh_cfg "${SELF_ROOT}/${SSH_INS_CFG}"  "${THIS_CLUSTER}" "${SSH_INS_USR}" "${DHOSTS}"

    #======================================
    # Create the tarball
    #======================================
    [[ -f "${SELF_ROOT}/${MUSE_TAR}" ]] && rm -f "${SELF_ROOT}/${MUSE_TAR}"
    cd .. >/dev/null
    tar zcf "${SELF_ROOT}/${MUSE_TAR}" muse_root >/dev/null || die "tar failed"
    cd - >/dev/null

    #======================================
    # SCP the tarball to the cluster
    #======================================
    for THOST in ${DHOSTS}
    do
        echo "${THOST}"
        scp -o StrictHostKeyChecking=no -F "${SELF_ROOT}/${SSH_DEP_CFG}" "${SELF_ROOT}/${MUSE_TAR}" "${THOST}:." >/dev/null 2>&1 || die "SCP failed for host ${THOST}"
        scp -o StrictHostKeyChecking=no -F "${SELF_ROOT}/${SSH_DEP_CFG}" "${SELF_ROOT}/install_muse" "${THOST}:." >/dev/null 2>&1 || die "SCP failed for host ${THOST}"
        ssh -o StrictHostKeyChecking=no -F "${SELF_ROOT}/${SSH_INS_CFG}" "${THOST}" "cd ~${SSH_DEP_USR};./install_muse" >/dev/null 2>&1 || die "Install failed for host ${THOST}"
    done

    #======================================
    # Cleanup
    #======================================
    if "${CLEAN_UP_ON_EXIT}"
    then
        [[ -f "${SELF_ROOT}/${SSH_DEP_CFG}" ]] && rm -f "${SELF_ROOT}/${SSH_DEP_CFG}"
        [[ -f "${SELF_ROOT}/${SSH_INS_CFG}" ]] && rm -f "${SELF_ROOT}/${SSH_INS_CFG}"
        [[ -f "${SELF_ROOT}/${MUSE_TAR}" ]] && rm -f "${SELF_ROOT}/${MUSE_TAR}"
    fi
}
